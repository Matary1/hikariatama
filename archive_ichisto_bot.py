import datetime
from google.oauth2 import service_account
from googleapiclient.discovery import build
import telebot
import json
import os
script_path = os.path.dirname(os.path.abspath(__file__)) + "/"

types = telebot.types
bot = telebot.TeleBot('<api-token>')

BUTTONS_IN_ROW = 1

questions = ['*–í –∫–∞–∫–æ–π –¥–µ–Ω—å –∏ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º —É–¥–æ–±–Ω–∞ —É–±–æ—Ä–∫–∞?*',
             '*–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏*. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username –≤ –¢–µ–ª–µ–≥—Ä–∞–º.']


def read_db():
    global db
    try:
        with open(script_path + "main_database.json", 'r') as f:
            temp = json.loads(f.read())
            db = dict()
            for key, value in temp.items():
                db[int(key)] = value

    except Exception as e:
        db = dict()
        print("DATABASE READ ERROR")
        print(e)


read_db()


def save_db():
    global db
    with open(script_path + "main_database.json", 'w') as f:
        f.write(json.dumps(db))


SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SERVICE_ACCOUNT_FILE = '/var/www/html/bot/sheets_service.json'

creds = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES)

service = build('sheets', 'v4', credentials=creds)
sheet = service.spreadsheets()
result = sheet.values().get(spreadsheetId="<spreadsheet>",
                            range="user!A2:Z1000").execute()
values = result.get('values', [])

formatted_prices = {}
unformatted_prices = {}
for row in values:
    formatted_prices[row[0]] = row[3].format(n=row[2])
    unformatted_prices[row[0]] = row[2]


def log_msg(from_user, msg):
    pass


services_db = {
    'üè† –£–±–æ—Ä–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã': {
        'üßπ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞: ' + formatted_prices['standart_clean']: ['‚ûï –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞ üßπ: ' + formatted_prices['standart_clean']],
        'üåÄ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞: ' + formatted_prices['full_clean']: ['‚ûï –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞ üåÄ: ' + formatted_prices['full_clean']],
        'üïé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏': [
            '‚ûï –û—Ç–¥–µ–ª—å–Ω–æ–µ –º—ã—Ç—å–µ —Å–∞–Ω—É–∑–ª–∞: ' +
            formatted_prices['toilet_clean'],
            '‚ûï –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–µ –º—ã—Ç—å–µ –∫—É—Ö–Ω–∏: ' +
            formatted_prices['kitchen_clean'],
            '‚ûï –ú—ã—Ç—å–µ –°–í–ß: ' + formatted_prices['shf_clean'],
            '‚ûï –ú—ã—Ç—å–µ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞: ' +
            formatted_prices['fridge_clean'],
            '‚ûï –ú—ã—Ç—å–µ –¥—É—Ö–æ–≤–∫–∏: ' + formatted_prices['oven_clean'],
            '‚ûï –ú—ã—Ç—å–µ –≤—ã—Ç—è–∂–∫–∏: ' + formatted_prices['hood_clean']
        ]
    },
    'üõã –•–∏–º—á–∏—Å—Ç–∫–∞ –º–µ–±–µ–ª–∏ (—Å –≤—ã–µ–∑–¥–æ–º)': [
        '‚ûï –î–∏–≤–∞–Ω –ø—Ä—è–º–æ–π: ' + formatted_prices['sofa_direct'],
        '‚ûï –î–∏–≤–∞–Ω —É–≥–ª–æ–≤–æ–π: ' + formatted_prices['sofa_corner'],
        '‚ûï –ú–∞—Ç—Ä–∞—Ü (1 —Å—Ç–æ—Ä–æ–Ω–∞): ' + formatted_prices['mattress_solo'],
        '‚ûï –ú–∞—Ç—Ä–∞—Ü (2 —Å—Ç–æ—Ä–æ–Ω—ã): ' + formatted_prices['mattress_duo']
    ],
    'üñº –ú–æ–π–∫–∞ –æ–∫–æ–Ω': [
        '‚ûï –ú–æ–π–∫–∞ –æ–∫–æ–Ω: ' + formatted_prices['windows']
    ],
    'üíß –•–∏–º—á–∏—Å—Ç–∫–∞ –ø–æ—Å—Ç–µ–ª—å–Ω–æ–≥–æ –±–µ–ª—å—è –∏ —à—Ç–æ—Ä': [
        '‚ûï –®—Ç–æ—Ä—ã: ' + formatted_prices['curtains'],
        '‚ûï –ü–æ—Å—Ç–µ–ª—å–Ω–æ–µ –±–µ–ª—å–µ: ' + formatted_prices['linens']
    ]
}

calculator_db = {
    'üßπ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞': unformatted_prices['standart_clean'],
    'üåÄ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞': unformatted_prices['full_clean']
}

info_db = {
    'üßπ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞': 'standart_clean',
    'üåÄ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞': 'full_clean'
}

additional_info = {
    '0_0': 'üí† –í–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞ –ø–æ–ª–∞ –∏ –ø–ª–∏–Ω—Ç—É—Å–æ–≤ (–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤)\nüí† –ü—Ä–æ—Ç–∏—Ä–∫–∞ –ø—ã–ª–∏ —Å–æ –≤—Å–µ—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ \nüí† –£–±–æ—Ä–∫–∞ —Å–∞–Ω—É–∑–ª–∞ (–º—ã—Ç—å–µ –ø–ª–∏—Ç–∫–∏, —Ä–∞–∫–æ–≤–∏–Ω—ã, —É–Ω–∏—Ç–∞–∑–∞, –≤–∞–Ω–Ω—ã, —Å–º–µ—Å–∏—Ç–µ–ª—è, –∏.—Ç.–¥)\nüí† –£–±–æ—Ä–∫–∞ –∫—É—Ö–Ω–∏ (–∫—É—Ö–æ–Ω–Ω–æ–≥–æ –≥–∞—Ä–Ω–∏—Ç—É—Ä–∞ —Å–Ω–∞—Ä—É–∂–∏, –≤–Ω—É—Ç—Ä–∏ –µ—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç—ã —É–±—Ä–∞–Ω—ã, –≤–∞—Ä–æ—á–Ω–æ–π –ø–∞–Ω–µ–ª–∏, –ø–ª–∏—Ç—ã, —Å–º–µ—Å–∏—Ç–µ–ª–µ–π, –≤—ã—Ç—è–∂–∫–∏, –º–æ–π–∫–∞ —Ä–∞–∫–æ–≤–∏–Ω—ã, —Ä–∞–±–æ—á–µ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏)\nüí† –í—ã–Ω–æ—Å –º—É—Å–æ—Ä–∞ –¥–æ 10 –∫–≥',
    '0_1': 'üí† –ü—Ä–æ—Ç–∏—Ä–∫–∞ –ø—ã–ª–∏ —Å–æ –≤—Å–µ—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ \nüí† –°—É—Ö–∞—è —É–±–æ—Ä–∫–∞ –ø—ã–ª–µ—Å–æ—Å–æ–º (–∫–æ–≤—Ä–æ–≤—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è)\nüí† –í–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞ –ø–æ–ª–∞ –∏ –ø–ª–∏–Ω—Ç—É—Å–æ–≤ (–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤)\nüí† –ú—ã—Ç—å–µ –¥–≤–µ—Ä–µ–π –∏ –¥–≤–µ—Ä–Ω—ã—Ö –±–ª–æ–∫–æ–≤, –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–æ–≤, –∑–µ—Ä–∫–∞–ª—å–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π\nüí† –í–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞ —Ñ–∞—Å–∞–¥–æ–≤ —à–∫–∞—Ñ–æ–≤ –∏ —Ç—É–º–± —Å–Ω–∞—Ä—É–∂–∏ (–≤–Ω—É—Ç—Ä–∏ –µ—Å–ª–∏ –ø—É—Å—Ç–æ)\nüí† –£–¥–∞–ª–µ–Ω–∏–µ –ø—ã–ª–∏ —Å –ø–æ—Ç–æ–ª–æ—á–Ω—ã—Ö —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤ –∏ –ª—é—Å—Ç—Ä\nüí† –£–¥–∞–ª–µ–Ω–∏–µ –ø—ã–ª–∏ —Å –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–π, —Ä–æ–∑–µ—Ç–æ–∫ –∏ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤\nüí† –£–±–æ—Ä–∫–∞ —Å–∞–Ω—É–∑–ª–∞ (–º—ã—Ç—å–µ –ø–ª–∏—Ç–∫–∏, —Ä–∞–∫–æ–≤–∏–Ω—ã, —É–Ω–∏—Ç–∞–∑–∞, –≤–∞–Ω–Ω—ã, –¥—É—à–µ–≤–æ–π –∫–∞–±–∏–Ω—ã, —Å–º–µ—Å–∏—Ç–µ–ª—è, –∏.—Ç.–¥)\nüí† –£–±–æ—Ä–∫–∞ –∫—É—Ö–Ω–∏ (–∫—É—Ö–æ–Ω–Ω–æ–≥–æ –≥–∞—Ä–Ω–∏—Ç—É—Ä–∞ —Å–Ω–∞—Ä—É–∂–∏, –≤–Ω—É—Ç—Ä–∏ –µ—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç—ã —É–±—Ä–∞–Ω—ã, –≤–∞—Ä–æ—á–Ω–æ–π –ø–∞–Ω–µ–ª–∏, –ø–ª–∏—Ç—ã, —Å–º–µ—Å–∏—Ç–µ–ª–µ–π, –≤—ã—Ç—è–∂–∫–∏, –º–æ–π–∫–∞ —Ä–∞–∫–æ–≤–∏–Ω—ã, —Ä–∞–±–æ—á–µ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏)\nüí† –í—ã–Ω–æ—Å –º—É—Å–æ—Ä–∞ –¥–æ 10 –∫–≥'
}


def get_item_by_path(path):
    unformatted_result = services_db

    if path[0] != "":
        for path_item in path:
            if type(unformatted_result) == dict:
                unformatted_result = list(unformatted_result.items())[
                    int(path_item)][1]
            elif type(unformatted_result) in [list, set]:
                unformatted_result = unformatted_result[int(path_item)]

    return unformatted_result


def get_kb(path='', user=None):
    path = path.split("_")
    unformatted_result = get_item_by_path(path)
    result = []

    result_markup = types.InlineKeyboardMarkup()
    i = 0

    joined_path = '_'.join(path) + "_" if '_'.join(path) != "" else ''

    def for_def(result_item, tmp, i):
        if type(tmp) in [list, dict, set]:
            # print(i)
            result.append(types.InlineKeyboardButton(
                result_item, callback_data='path_' + joined_path + str(i)))
        elif type(tmp) == str:
            result.append(types.InlineKeyboardButton(
                result_item, callback_data='order_' + joined_path + str(i)))
        elif tmp == None:
            result.append(types.InlineKeyboardButton(
                result_item, callback_data='order_' + joined_path + str(i)))

    if type(unformatted_result) == dict:
        for result_item, tmp in unformatted_result.items():
            for_def(result_item, tmp, i)
            i += 1
    else:
        for result_item in unformatted_result:
            for_def(result_item, None, i)
            i += 1

    for i in range(0, len(result), BUTTONS_IN_ROW):
        result_markup.add(*result[i:i+BUTTONS_IN_ROW])

    if path[0] != "":
        result_markup.add(types.InlineKeyboardButton(
            'üëà –ù–∞–∑–∞–¥', callback_data='path_' + '_'.join(path[:-1])))

    return result_markup


calculator_kb = types.InlineKeyboardMarkup()
i = 0
for iService, price in calculator_db.items():
    calculator_kb.add(types.InlineKeyboardButton(
        iService, callback_data="calculate_" + str(i)))
    i += 1
calculator_kb.add(types.InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∞', callback_data='home'))


info_kb = types.InlineKeyboardMarkup()
i = 0
for iService, price in info_db.items():
    info_kb.add(types.InlineKeyboardButton(
        iService, callback_data="serviceinfo_" + str(i)))
    i += 1
info_kb.add(types.InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∞', callback_data='home'))

cancel_markup = types.InlineKeyboardMarkup()
cancel_markup.add(types.InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∞', callback_data="home"))

main_menu = get_kb()
# main_menu.add(types.InlineKeyboardButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ–± —É–±–æ—Ä–∫–µ', callback_data="services_info"))
main_menu.add(types.InlineKeyboardButton('üì± –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data="begin_question"),
              types.InlineKeyboardButton('‚öñÔ∏è –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏', callback_data="calculator"))

ordering_menu = types.InlineKeyboardMarkup()
ordering_menu.add(types.InlineKeyboardButton('‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data="resume_order"),
                  types.InlineKeyboardButton('üõé –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data="enter_contacts"), )


labels = ['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–±–æ—Ä–∫–∏', '–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏']


def process_user(usid):
    if not usid in db:
        db[usid] = {'order_in_process': False, 'order_items': []}


def place_next_question(usid):
    answer(usid, questions[db[usid]['order_step']], cancel_markup)
    db[usid]['order_step'] += 1


def parse_last_question(usid, str_message):
    # print(str_message)
    if 'answers' in db[usid]:
        db[usid]['answers'].append(str_message)
    else:
        db[usid]['answers'] = [str_message]

    if len(db[usid]['answers']) > db[usid]['order_step']:
        db[usid]['answers'] = db[usid]['answers'][:db[usid]['order_step']]
    elif len(db[usid]['answers']) < db[usid]['order_step']:
        db[usid]['order_step'] = len(db[usid]['answers'])

    if db[usid]['order_step'] >= len(questions):
        order_data = ""
        i = 0
        for item in db[usid]['order_items']:
            order_data += "	*üìç " + get_item_by_path(item) + "*\n"
        order_data += "\n"
        for ans in db[usid]['answers']:
            order_data += "_" + labels[i] + "_: `" + ans + "`\n"
            i += 1

        answer(usid, "*–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!*\n\n" + order_data, main_menu)
        # answer(admin_chat, "*–ù–æ–≤—ã–π –∑–∞–∫–∞–∑*\n\n" + order_data)
        db[usid]['answers'] = []
        del db[usid]['order_step']
        del db[usid]['order_items']
        db[usid]['order_in_process'] = False
        log_msg(bot.get_chat_member(usid, usid).user, "–ó–∞–≤–µ—Ä—à–∏–ª –∑–∞–∫–∞–∑")
    else:
        place_next_question(usid)


start_message = '–ü—Ä–∏–≤–µ—Ç. –Ø –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –∫–ª–∏–Ω–∏–Ω–≥-—Å–µ—Ä–≤–∏—Å "*–ê–π! –ß–∏—Å—Ç–æ*". –ß—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏?'


def answer(destination, msg, reply_markup=None, parse_mode="Markdown", reply_to_message_id=None):
    if isinstance(destination, telebot.types.CallbackQuery):
        try:
            return bot.edit_message_text(chat_id=destination.message.chat.id, message_id=destination.message.message_id, text=msg, reply_markup=reply_markup, parse_mode=parse_mode, disable_web_page_preview=True)
        except telebot.apihelper.ApiException as e:
            # print(e)
            bot.answer_callback_query(callback_query_id=destination.id)
    elif isinstance(destination, telebot.types.Message):
        return bot.send_message(chat_id=destination.chat.id, text=msg, reply_markup=reply_markup, parse_mode=parse_mode, reply_to_message_id=reply_to_message_id, disable_web_page_preview=True)
    elif isinstance(destination, int) or (isinstance(destination, str) and destination.startswith("@")):
        return bot.send_message(chat_id=destination, text=msg, reply_markup=reply_markup, parse_mode=parse_mode, reply_to_message_id=reply_to_message_id, disable_web_page_preview=True)


@bot.message_handler(commands=['start'])
def start(message):
    read_db()
    log_msg(message.from_user, "–ù–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º")
    process_user(message.from_user.id)
    try:
        db[message.from_user.id]['last_action'] = ''
        del db[message.from_user.id]['order_items']
        del db[message.from_user.id]['order_step']
    except:
        pass
    bot.send_message(message.chat.id, start_message,
                     reply_markup=main_menu, parse_mode="Markdown")
    save_db()


def get_order_list(raw):
    items = []
    for item in raw:
        items.append(get_item_by_path(item))
    msg = "`"
    i = 1
    for item in items:
        msg += "`  `üåÄ " + str(i) + ". " + item[2:] + "\n"
        i += 1
    msg += "`"
    return msg


def edit_msg(order_items):
    edit_markup = types.InlineKeyboardMarkup()
    edit_list = []
    items = []
    for item in order_items:
        items.append(get_item_by_path(item))
    i = 1
    for item in items:
        edit_list.append(types.InlineKeyboardButton(
            "‚ùå " + str(i), callback_data="remove_" + str(i - 1)))
        i += 1

    for i in range(0, len(edit_list), 3):
        edit_markup.add(*edit_list[i:i+3])

    edit_markup.add(types.InlineKeyboardButton('üëà –ö –∑–∞–∫–∞–∑—É', callback_data='path_' + '_'.join(str(x)
                                                                                              for x in order_items[:-1])), types.InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='home'))
    edit_markup.add(types.InlineKeyboardButton(
        "üõé –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üõé", callback_data="enter_contacts"))

    return edit_markup


def get_order_path(usid):
    if db[usid]['last_action'] == "order_in_process":
        return "\n\n`			  `üõé *–ö–æ—Ä–∑–∏–Ω–∞* üõé\n" + get_order_list(db[usid]['order_items'])

    return ""


@bot.message_handler(content_types=['text'])
def text(message):
    read_db()
    process_user(message.from_user.id)
    try:
        if db[message.from_user.id]['last_action'] == "enter_contacts":
            parse_last_question(message.from_user.id, message.text)
        elif db[message.from_user.id]['last_action'].startswith("calculate_"):
            log_msg(message.from_user, "–†–∞—Å—Å—á–∏—Ç–∞–ª —Å—Ç–æ–∏–º–æ—Å—Ç—å")
            # try:
            service_id = int(db[message.from_user.id]
                             ['last_action'].split("_")[1])
            answer(message, "*–£—Å–ª—É–≥–∞ *`{}`* –∑–∞ {} –º¬≤ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å {} ‚ÇΩ*".format(list(calculator_db.items())
                                                                                [service_id][0], message.text, int(message.text) * int(list(calculator_db.items())[service_id][1])), main_menu)
            db[message.from_user.id]['last_action'] = ""
        elif db[message.from_user.id]['last_action'] == "question":
            log_msg(message.from_user, "–ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å")
            # answer(admin_chat, "*–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @" + message.from_user.username + "*: `" + message.text.replace("`", "\\`") + "`")
            answer(message, "*–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —É–¥–∞–ª—è–π—Ç–µ –∏ –Ω–µ –∏–∑–º–µ–Ω—è–π—Ç–µ —Å–≤–æ–π @username, –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å!*", main_menu)
            db[message.from_user.id]['last_action'] = ""
    except KeyError:
        pass
    save_db()


@bot.callback_query_handler(func=lambda call: True)
def call_handle(call):
    read_db()
    process_user(call.from_user.id)
    print(call.data)
    order_path = get_order_path(call.from_user.id)

    kb_path = call.data[5:] if call.data.startswith("path") else ''

    order_kb = get_kb(kb_path, call.from_user.id)
    if db[call.from_user.id]['last_action'] == "delete_photo":
        try:
            bot.delete_message(call.message.chat.id,
                               call.message.message_id - 1)
        except:
            pass

    if "delete_photo" in db[call.from_user.id] and db[call.from_user.id]['delete_photo'] == True:
        try:
            bot.delete_message(call.message.chat.id,
                               call.message.message_id - 1)
            db[call.from_user.id]['delete_photo'] = False
        except:
            pass

    if db[call.from_user.id]['last_action'] == "order_in_process":
        order_kb.add(types.InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='home'),
                     types.InlineKeyboardButton("üõé –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üõé", callback_data="enter_contacts"))
        order_kb.add(types.InlineKeyboardButton(
            'üñç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑', callback_data='edit_order'))
    else:
        order_kb.add(types.InlineKeyboardButton(
            "üö™ –í—ã—Ö–æ–¥", callback_data="home"))

    if db[call.from_user.id]['last_action'].startswith("calculate"):
        answer(call, "*–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –º¬≤*", cancel_markup)
        db[call.from_user.id]['last_action'] = call.data

    if call.data == "begin_order":
        log_msg(call.from_user, "–ù–∞—á–∞–ª –∑–∞–∫–∞–∑")
        answer(call, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º ‚ûï –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É.', order_kb)
    elif call.data == "begin_question":
        log_msg(call.from_user, "–ù–∞—á–∞–ª –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
        if isinstance(call.from_user.username, str):
            answer(call, '*–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å*.', cancel_markup)
            db[call.from_user.id]['last_action'] = 'question'
        else:
            answer(call, '*–Ø –Ω–µ –º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –Ω–µ—Ç @username. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ —Ç–µ–ª. +7 (939)-300-63-65*', main_menu)
    elif call.data.startswith("serviceinfo_"):
        service_id = int(call.data.split("_")[1])
        log_msg(call.from_user, "–ó–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ " +
                list(info_db.items())[service_id][0])
        with open(script_path + "serviceinfo/" + list(info_db.items())[service_id][1] + ".jpg", 'rb') as f:
            bot.send_photo(call.from_user.id, photo=f)

        bot.delete_message(call.message.chat.id, call.message.message_id)
        db[call.from_user.id]['last_action'] = "delete_photo"
        answer(call.from_user.id, "*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ *`" + list(info_db.items())
               [service_id][0] + "`*. –¶–µ–Ω–∞: *`" + formatted_prices[list(info_db.items())[service_id][1]] + "`", main_menu)
    elif call.data == "services_info":
        answer(call, "*–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏*", info_kb)
    elif call.data == "calculator":
        answer(call, '*–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.*', calculator_kb)
        db[call.from_user.id]['last_action'] = "calculate"
    elif call.data.startswith('path'):
        try:
            if call.data[5:] in additional_info:
                tmp_order_kb = order_kb
                tmp_order_kb.add(types.InlineKeyboardButton(
                    '–ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Ü©Ô∏è', callback_data='additional_' + call.data[5:]))
                answer(call, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º ‚ûï –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É.' +
                       order_path, tmp_order_kb)
            else:
                answer(
                    call, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º ‚ûï –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É.' + order_path, order_kb)
        except Exception as e:
            print(e)
            pass
    elif call.data.startswith('additional_'):
        path = call.data[11:]
        additional_info_kb = types.InlineKeyboardMarkup()
        additional_info_kb.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å ‚ûï', callback_data='order_' +
                                                          path + '_0'), types.InlineKeyboardButton('üëà –ù–∞–∑–∞–¥', callback_data='path_' + path))
        answer(call, additional_info[path], additional_info_kb)

    elif call.data.startswith('order'):
        if db[call.from_user.id]['last_action'] == "order_in_process" and call.data.split("_")[1:] in db[call.from_user.id]['order_items']:
            answer(call, "*–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫ –∑–∞–∫–∞–∑—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.*\n" +
                   get_order_list(db[call.from_user.id]['order_items']), ordering_menu)
            return

        if db[call.from_user.id]['last_action'] == "order_in_process":
            db[call.from_user.id]['order_items'].append(
                call.data.split("_")[1:])
        else:
            db[call.from_user.id]['order_items'] = [call.data.split("_")[1:]]
            db[call.from_user.id]['last_action'] = "order_in_process"

        answer(call, "*–î–æ–±–∞–≤–ª–µ–Ω–æ –∫ –∑–∞–∫–∞–∑—É.*\n" +
               get_order_list(db[call.from_user.id]['order_items']), ordering_menu)
    elif call.data == "home":
        try:
            db[call.from_user.id]['last_action'] = ''
            del db[call.from_user.id]['order_items']
            del db[call.from_user.id]['order_step']
        except:
            pass
        answer(call, start_message, main_menu)
    elif call.data == "resume_order":
        answer(call, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º ‚ûï –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É.' +
               order_path, order_kb)
    elif call.data == "enter_contacts":
        db[call.from_user.id]['last_action'] = 'enter_contacts'
        db[call.from_user.id]['order_step'] = 0
        answer(call, questions[db[call.from_user.id]
                               ['order_step']], cancel_markup)
        db[call.from_user.id]['order_step'] = 1

    elif call.data == "edit_order":
        answer(call, "*–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n_	–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ —Ü–∏—Ñ—Ä–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–µ._" +
               order_path, edit_msg(db[call.from_user.id]['order_items']))
    elif call.data.startswith("remove"):
        remove_i = int(call.data.split("_")[1])
        del db[call.from_user.id]['order_items'][remove_i]
        order_path = get_order_path(call.from_user.id)
        answer(call, "`‚úÖ –ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞.`\n\n*–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n_	–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ —Ü–∏—Ñ—Ä–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–µ._" +
               order_path, edit_msg(db[call.from_user.id]['order_items']))

    save_db()


bot.polling(none_stop=True, timeout=10)
