# -*- coding: utf-8 -*-

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
import sys
from keyboards import *
from dutils import *
from tanks import *
from io import BytesIO
import datetime
import os
import re
from random import choice
import time
import requests
import json
from vk_api.upload import VkUpload
import vk_api.keyboard
from vk_api.utils import get_random_id
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
import vk_api
import imgkit
start_message = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
# ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –±–æ—Ç–∞ (–æ–Ω–æ –∂–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –∫–ª–∞–Ω–∞, –∫—É–¥–∞ –Ω–∞–¥–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞.)
clan_group_id = <int>
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–Ω—É–∂–Ω–æ —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∞–≤–∞–º–∏)
bot_token = "<token>"
# –ó–∞–¥–µ—Ä–∂–∫–∞ –ª–æ–Ω–≥–ø–æ–ª–ª–∏–Ω–≥–∞. –ï—Å–ª–∏ —Ö–æ—Å—Ç –º–æ—â–Ω—ã–π –∏ –Ω–µ –∂–∞–ª–∫–æ –º–æ—â–Ω–æ—Å—Ç–µ–π, —Ç–æ –º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å.
longpool_sleep = .6

params = {u'–ü—Ä–æ—Ç–∏–≤': 'against', u'–¢–∏–ø': 'type', u'–î–∞—Ç–∞': 'date', u'–í—Ä–µ–º—è': 'time',
          u'–ö–æ–º–∞–Ω–¥–∏—Ä': 'komandor', u'–ö–æ–ª-–≤–æ –º–µ—Å—Ç': 'main_q', u'–ö–æ–ª-–≤–æ –∑–∞–ø–∞—Å–Ω—ã—Ö': 'add_q'}

# ID –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–æ–Ω—Ñ—ã
admins_conversation = 2000000001
# ID –∫–æ–Ω—Ñ—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–ª–∞–Ω–∞
main_conversation = 2000000001


# –≠—Ç–æ - —á—Ç–æ–±—ã –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–ª–∏ —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–¥–µ.
reload(sys)
sys.setdefaultencoding('utf-8')

# –≠—Ç–æ - —á—Ç–æ–±—ã —á–∏—Ç–∞—Ç—å –∏ –ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –ø—É—Ç–∏ (/var/www/bot/example/file.txt)
path = os.path.dirname(os.path.abspath(__file__)) + "/"
print("Starting from directory " + path + "...")

# –û–±—ä—è–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤–∫ —Å —Ç–æ–∫–µ–Ω–æ–º –∏ —Ç.–¥.
vk_session = vk_api.VkApi(token=bot_token)
longpoll = VkBotLongPoll(vk_session, clan_group_id)
vk = vk_session.get_api()


#####  –û–ü–ï–†–ê–¶–ò–ò –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•   #####

'''
	–î–≤–µ –±–∞–∑—ã —Å–¥–µ–ª–∞–Ω—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫.
	–ë–∞–∑–∞ users.db –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞ –æ—Ç —á–∞—Ç–∞\\–±–æ—Ç–∞, –µ–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞—Ç—å –ø—Ä–∏ —Ç–µ—Å—Ç–∞—Ö
	–í–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç—ã —É–∂–µ –ø–æ—Ñ–∏–∫—Å–∏–ª –±–∞–≥, –Ω–æ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏–ª–∏ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ —Ç–µ–±–µ –æ—Ç –Ω–µ–≥–æ –Ω–∞–¥–æ, –ø—Ä–æ—Å—Ç–æ —Å—Ç–∏—Ä–∞–µ—à—å –ü–£–ù–ö–¢ steps –∏–∑ main.db

'''


# –ß–∏—Ç–∞–µ–º –±–∞–∑—É –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω –∫–æ–Ω–µ—á–Ω–æ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
try:
    with open(path + "users.db", 'r') as f:
        users_database = json.loads(f.read())
except:
    users_database = dict()


# –ß–∏—Ç–∞–µ–º –±–∞–∑—É –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω –∫–æ–Ω–µ—á–Ω–æ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
try:
    with open(path + "main.db", 'r') as f:
        main_db = json.loads(f.read())
except:
    main_db = dict()

if not 'requests' in main_db:
    main_db['requests'] = dict()

if not 'tanks' in main_db:
    main_db['tanks'] = dict()

if not 'steps' in main_db:
    main_db['steps'] = dict()

if not 'events' in main_db:
    main_db['events'] = list()

if not 'events_archive' in main_db:
    main_db['events_archive'] = list()


old_db__users = {}
old_db__main_db = {}

# –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ –ø–æ–ª–ª–∏–Ω–≥–∞: –±–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Ñ–∞–π–ª, –æ—Ç–¥–µ–ª—å–Ω—ã–π, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–Ω–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è


def autosave_db_step_1():
    old_db__users = users_database
    old_db__main_db = main_db
# –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –ø–æ–ª–ª–∏–Ω–≥–∞: –±–∞–∑–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è —Å–æ —Å—Ç–∞—Ä–æ–π, –∏ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Ñ–∞–π–ª.


def autosave_db_step_2():
    if users_database != old_db__users:
        with open(path + "users.db", 'w') as f:
            f.write(json.dumps(users_database))

    if main_db != old_db__main_db:
        with open(path + "main.db", 'w') as f:
            f.write(json.dumps(main_db))


#####  –ö–õ–ê–í–ò–ê–¢–£–†–´  #####

def get_keyboard_main(user_id):
    if check_admin(user_id):
        return get_keyboard__admin()

    if vk.groups.isMember(group_id=clan_group_id, user_id=user_id):
        return get_keyboard__group_member()

    return get_keyboard__user()


def get_tanks_kb(user_id):
    kb = {
        "one_time": True,
        "buttons": [
            [{
                "action": {
                    "type": "text",
                    "label": "üè† –î–æ–º–æ–π"
                },
                "color": "primary"
            }]
        ]
    }

    btns_in_row = 3

    current_tanks_db = tanks_db

    for step_key in main_db['tanks'][str(user_id)]['path']:
        try:
            current_tanks_db = current_tanks_db[step_key]
        except:
            pass

    if current_tanks_db != tanks_db:
        kb['buttons'].insert(0, {
            "action": {
                "type": "text",
                "label": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
            },
            "color": "primary"
        })

    if type(current_tanks_db) is list:
        answer = "‚ûñ‚ûñüîπ " + \
            main_db['tanks'][str(user_id)]['path'][-1] + \
            " üîπ‚ûñ‚ûñ\n" + current_tanks_db[0]

        vk.messages.send(
            peer_id=user_id,
            message="¬†",
            random_id=get_random_id(),
            attachment="photo272097546_457242694"
        )

        vk.messages.send(
            peer_id=user_id,
            message=answer,
            random_id=get_random_id(),
            keyboard=json.dumps(kb, ensure_ascii=False)
        )

        return True

    for i in range(0, len(current_tanks_db), btns_in_row):
        row = []
        for j in range(0, btns_in_row):
            if len(current_tanks_db) > i + j:
                row.append({
                    "action": {
                        "type": "text",
                        "label": current_tanks_db.keys()[i + j]
                    },
                    "color": "secondary"
                })

        kb['buttons'].append(row)

    return json.dumps(kb, ensure_ascii=False)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤: –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ vk_api -> –ø–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥—ã "–¢–µ—Ö–Ω–∏–∫–∞" -> —É–¥–∞–ª—è–µ–º –¥–æ—Ö—Ä–µ–Ω–∏—â–∞ –Ω–µ–Ω—É–∂–Ω–æ–≥–æ –≥–æ–≤–Ω–∞ –∏–∑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è -> –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ª–∏—Å—Ç —Å –æ–¥–Ω–∏–º–∏ id'—à–Ω–∏–∫–∞–º–∏ -> –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –¥–∞–Ω–Ω–æ–º –ª–∏—Å—Ç–µ –Ω–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -> –í–æ–∑–≤—Ä–∞—â–∞–µ–º True\False
def check_admin(usid):
    return usid in list(map(lambda x: x['member_id'], vk.messages.getConversationMembers(peer_id=2000000001)['items']))


def choose_players(event, evid):
    users_list = ""
    i = 1
    for user, data in users_database.items():
        user_inf = vk.users.get(
            user_ids=user, fields='first_name_nom', name_case='nom')[0]
        if not 'name' in data:
            data['name'] = user_inf['first_name'] + ' ' + user_inf['last_name']

        if not 'nickname' in data:
            data['nickname'] = 'unknown'

        users_list += str(i) + " üî∞ "
        if str(user) in list(map(lambda x: str(x[0]), main_db['events'][evid]['registered'])):
            users_list += "üéü "

        users_list += data['nickname'] + " " + data['name'] + "\n"

        i += 1

    vk.messages.send(
        peer_id=event.obj.peer_id,
        message="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö, –∫—Ç–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª: \n\n" + users_list +
        "\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n1 3 4",
        random_id=get_random_id(),
        keyboard=get_keyboard_main(event.obj.peer_id)
    )


#####  –û–ü–ï–†–ê–¶–ò–ò –° WOTINFO  #####

def cleanhtml(raw_html):
    return re.sub(re.compile('<.*?>'), '', raw_html)


def get_clan_stats():
    r2 = requests.get(
        "http://wotinfo.net/ru/clanoverview?id=16251&server=XBOX").text
    # print(r2)
    info = []

    while not r2.find("<var>") == -1:
        cutted = cleanhtml(
            r2[r2.find("<var>") + 5:r2.find("</var>", r2.find("<var>"))])
        r2 = r2[r2.find("<var>") + 5:]
        cutted = re.sub(re.compile('[^0-9,]*'), '', cutted)
        if cutted == "" or cutted == "7" or cutted == "8":
            continue
        info.append(cutted)

    if len(info) < 3:
        return '–ù–µ—Ç —Å–≤—è–∑–∏ —Å WoTinfo. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–¥–Ω–µ–µ'

    answer = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞–Ω–∞ N_ERA \"XBOX\":\n‚ûñ‚ûñ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚ûñ‚ûñ\n		 üî∏		" + \
        info[0] + "		üî∏\n‚ûñ‚ûñ‚ûñ‚ûñ WN7 ‚ûñ‚ûñ‚ûñ‚ûñ\n		üî∏		" + info[1] + \
        "		üî∏\n‚ûñ‚ûñ‚ûñ‚ûñ WN8 ‚ûñ‚ûñ‚ûñ‚ûñ\n		üî∏		" + info[2] + "		üî∏\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
    return answer

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å WoTinfo, –∞ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏


def check_if_player_exists(plr, server="XBOX"):
    r = requests.get("http://wotinfo.net/ru/efficiency",
                     params={'server': server, 'playername': plr}).text
    if " –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in r:
        return False

    return True


def get_player_info(plr, server="XBOX"):

    r = requests.get("http://wotinfo.net/ru/efficiency",
                     params={'server': server, 'playername': plr}).text
    playerid = r[r.find("?playerid=") +
                 10:r.find("&server=", r.find("?playerid=") + 10)]
    r2 = r
    if " –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in r:
        return False
    stats = dict()
    info = []
    while not r.find("<strong>") == -1:
        cutted = cleanhtml(
            r[r.find("<strong>") + 8:r.find("</strong>", r.find("<strong>"))])
        r = r[r.find("<strong>") + 8:]
        if cutted == "":
            continue
        info.append(cutted)

    while not r2.find("<var>") == -1:
        cutted = cleanhtml(
            r2[r2.find("<var>") + 5:r2.find("</var>", r2.find("<var>"))])
        r2 = r2[r2.find("<var>") + 5:]
        cutted = re.sub(re.compile('[^0-9,]*'), '', cutted)
        if cutted == "" or cutted == "7" or cutted == "8":
            continue
        info.append(cutted)

    keys = ['nickname', 'registered', 'last_seen', 'trees_fallen', 'avg_tanks_level', 'fights', 'wins_coof', 'accurance_coof', 'alived_coof', 'avg_damage_to_at', 'avg_damage_per_fight',
            'destroyed_per_fight', 'explored_per_fight', 'defensed_per_fight', 'captured_per_fight', 'frags_dead_coof', 'clan', 'join_clan_date', 'clan_post', 'efficiency', 'WN7', 'WN8']
    for i in range(len(info)):
        stats[keys[i]] = info[i]

    # –ù–µ–¥–∞–≤–Ω—è—è —Å—Ç–∞—Ç–∞
    print(playerid)
    r3 = requests.get("http://wotinfo.net/ru/recent?playerid=" +
                      playerid + "&server=XBOX").text
    ef = []

    while not r3.find("<strong>") == -1:
        cutted = cleanhtml(
            r3[r3.find("<strong>") + 8:r3.find("<span", r3.find("<strong>"))])
        r3 = r3[r3.find("<strong>") + 8:]
        cutted = re.sub(re.compile('[^0-9,]*'), '', cutted)
        if cutted == "" or cutted == "7" or cutted == "8":
            continue
        ef.append(cutted)

    stats['w_efficiency'] = ef[0]
    stats['m_efficiency'] = ef[1]

    stats['w_wn7'] = ef[3]
    stats['m_wn7'] = ef[4]

    stats['w_wn8'] = ef[6]
    stats['m_wn8'] = ef[7]

    return stats


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª. –ö–æ–≥–¥–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ, –æ–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –≤–∏–¥–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π event
for event in longpoll.listen():
    autosave_db_step_1()
    # –ï—Å–ª–∏ –ø—Ä–∏—à–µ–¥—à–µ–µ —Å–æ–±—ã—Ç–∏–µ - —Å–æ–æ–±—â–µ–Ω–∏–µ
    if event.type == VkBotEventType.MESSAGE_NEW:
        # –ù–∞–ø–∏—Å–∞–ª–∏ –≤ –ª—Å –±–æ—Ç—É? –∏–ª–∏ –Ω–µ—Ç?
        if event.obj.peer_id == event.obj.from_id:
            # –°—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –º–µ—Ç–æ–¥–æ–º –∞–ø–∏—à–∫–∏
            userinfo = vk.users.get(
                user_ids=event.obj.peer_id, fields='first_name_nom', name_case='nom')[0]
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ –¥–∞–π –±–æ–∂–µ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if not str(event.obj.peer_id) in users_database:
                users_database[str(event.obj.peer_id)] = dict()

            if not str(event.obj.peer_id) in main_db['steps']:
                main_db['steps'][str(event.obj.peer_id)] = dict()
            # –ê –¥–∞–ª—å—à–µ –æ–±—ã—á–Ω—ã–º –∏—Ñ–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç –±–æ—Ç–∞.
            if event.obj.text == "–ù–∞—á–∞—Ç—å" or event.obj.text == "üè† –î–æ–º–æ–π":
                logging(userinfo, "–ù–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º")
                vk.messages.send(
                    peer_id=event.obj.peer_id,
                    message=start_message,
                    random_id=get_random_id(),
                    keyboard=get_keyboard_main(event.obj.from_id)
                )

                main_db['steps'][str(event.obj.from_id)]['last_action'] = ""
                main_db['steps'][str(event.obj.from_id)]['tanks'] = ""
            elif event.obj.text == "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É":
                logging(userinfo, "–ù–∞—á–∞–ª –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏")
                vk.messages.send(
                    peer_id=event.obj.peer_id,
                    message='–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.\n–ü—Ä–æ—Å—å–±–∞ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ!',
                    random_id=get_random_id()
                )

                if not str(event.obj.peer_id) in main_db['steps']:
                    main_db['steps'][str(event.obj.peer_id)] = dict()

                main_db['steps'][str(event.obj.peer_id)
                                 ]['last_action'] = "leave_request"
            elif event.obj.text == "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                try:
                    player_info = get_player_info(
                        users_database[str(event.obj.peer_id)]['nickname'])
                    player_info__str = "–í –∏–≥—Ä–µ —Å " + player_info['registered'] + "\n–°—ã–≥—Ä–∞–Ω–æ –±–æ–µ–≤: " + player_info['fights'] + "\n–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: " + player_info['wins_coof'] + "\n–ú–µ—Ç–∫–æ—Å—Ç—å: " + player_info['accurance_coof'] + "\n–í—ã–∂–∏–ª: " + player_info['alived_coof'] + "\n–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–Ω: " + player_info['avg_damage_per_fight'] + "\n–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: " + player_info['efficiency'] + \
                        "\nWN7: " + player_info['WN7'] + "\nWN8: " + player_info['WN8'] + "\n‚ûñ‚ûñ‚ûñ‚ûñ –ù–µ–¥–µ–ª—è ‚ûñ‚ûñ‚ûñ‚ûñ\n–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: " + player_info['w_efficiency'] + "\nWN7: " + player_info['w_wn7'] + \
                        "\nWN8: " + player_info['w_wn8'] + "\n‚ûñ‚ûñ‚ûñ‚ûñ –ú–µ—Å—è—Ü ‚ûñ‚ûñ‚ûñ‚ûñ\n–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: " + \
                        player_info['m_efficiency'] + "\nWN7:" + \
                        player_info['m_wn7'] + "\nWN8: " + player_info['m_wn8']
                    logging(userinfo, "–ó–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ—é —Å—Ç–∞—Ç—É")
                    vk.messages.send(
                        peer_id=event.obj.peer_id,
                        message=player_info__str,
                        random_id=get_random_id(),
                        keyboard=get_keyboard_main(event.obj.peer_id)
                    )
                except KeyError:
                    vk.messages.send(
                        peer_id=event.obj.peer_id,
                        message='–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à–µ–≥–æ –Ω–∏–∫–∞ (–ø–æ—á–µ–º—É-—Ç–æ) –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"',
                        random_id=get_random_id(),
                        keyboard=get_keyboard_main(event.obj.peer_id)
                    )
            elif event.obj.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞–Ω–∞":
                logging(userinfo, "–ó–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É –∫–ª–∞–Ω–∞")
                vk.messages.send(
                    peer_id=event.obj.peer_id,
                    message=get_clan_stats(),
                    random_id=get_random_id(),
                    keyboard=get_keyboard_main(event.obj.peer_id)
                )
            elif event.obj.text == "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è":
                logging(userinfo, "–ó–∞–ø—Ä–æ—Å–∏–ª —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è")
                vk.messages.send(
                    peer_id=event.obj.peer_id,
                    message="‚ÄºÔ∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º ‚ÄºÔ∏è\n ‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç ‚Äî 18+\n ‚Ä¢ –£–º–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç—å –∫–æ–º–∞–Ω–¥–∏—Ä–∞ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫—Ä–∏—Ç–∏–∫—É.\n ‚Ä¢ –û—Ç 5000 –±–æ—ë–≤ –∏ –æ—Ç 1300 WN8.\n ‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–∏ 1000 –±–æ–µ–≤.\n ‚Ä¢ –ñ–µ–ª–∞–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∫–ª–∞–Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö.\n ‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –∫–ª–∞–Ω–∞.\n ‚Ä¢ –û—Ç 3 —Ç–æ–ø–æ–≤ –≤ –∞–Ω–≥–∞—Ä–µ.\n ‚Ä¢ –ù–∞–ª–∏—á–∏–µ —Å–≤—è–∑–∏.\n ‚Ä¢ –ü—Ä–∞–π–º-—Ç–∞–π–º —Å 21:00 –ø–æ 00:00–º—Å–∫.\n ‚Ä¢ –£–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É‚ùóÔ∏è",
                    random_id=get_random_id(),
                    keyboard=get_keyboard_main(event.obj.peer_id)
                )
            elif event.obj.text == "–û –∫–ª–∞–Ω–µ":
                logging(userinfo, "–ó–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ")
                vk.messages.send(
                    peer_id=event.obj.peer_id,
                    message="–ö–ª–∞–Ω ¬´New Era¬ª –±—ã–ª –æ—Å–Ω–æ–≤–∞–Ω 13.02.2020–≥. –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π –∏–≥—Ä—ã \"World of Tanks\" –Ω–∞ XBOX One. –ü–µ—Ä–≤—ã–π —Å–æ—Å—Ç–∞–≤ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –∏–≥—Ä–æ–∫–∏ –∏–∑ –Ω–µ–º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤, —á—Ç–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ —Å–∫–æ—Ä–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ, –∏ —É–∂–µ —Å –ø–µ—Ä–≤—ã—Ö –¥–Ω–µ–π –±–æ–π—Ü—ã –∞–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—é—Ç —É—á–∞—Å—Ç–∏–µ –≤ –º–µ–∂–∫–ª–∞–Ω–æ–≤—ã—Ö —Å—Ä–∞–∂–µ–Ω–∏—è—Ö.\n–û –±–æ–ª—å—à–∏—Ö –ø–æ–±–µ–¥–∞—Ö –µ—â–µ –≥–æ–≤–æ—Ä–∏—Ç—å —Ä–∞–Ω–æ, –Ω–æ –º—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ç—Ä–µ–Ω–∏—Ä—É–µ–º —Å–æ—Å—Ç–∞–≤, —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—ã–≥—Ä–∞–Ω–Ω–æ—Å—Ç—å –∏ —Å–æ–ø–µ—Ä–Ω–∏—á–∞–µ–º —Å –±–æ–ª–µ–µ –æ–ø—ã—Ç–Ω—ã–º–∏ –∫–ª–∞–Ω–∞–º–∏. –í—Å–µ–≥–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ –≤–≤–æ–¥–∏–º –≤ –∫—É—Ä—Å –¥–µ–ª–∞ –Ω–æ–≤–∏—á–∫–æ–≤ –∏ –æ–∑–Ω–∞–∫–æ–º–ª—è–µ–º –∏—Ö —Å –º–∏—Ä–æ–º —Ç–∞–Ω–∫–æ–≤. –ú—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä—É —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –≥–¥–µ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –≤–∞–∂–Ω–∞ –æ—Ç–ª–∞–∂–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –∞ –≥–ª–∞–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å –ª—É—á—à–∏–º–∏!\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è –Ω–∞—Å —Å–∞–º—ã–º –≤–∞–∂–Ω—ã–º —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –ø–æ–±–µ–¥—ã –≤ –º–µ–∂–∫–ª–∞–Ω–æ–≤—ã—Ö –±–æ—è—Ö! –ù–æ –≤ –±—É–¥—É—â–µ–º, –≤–æ–∑–º–æ–∂–Ω–æ, –∫–ª–∞–Ω –±—É–¥–µ—Ç —Ä–∞—Å—Ç–∏ –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–∞—Ö –Ω–∞ –∫–æ–Ω—Å–æ–ª—è—Ö!",
                    random_id=get_random_id(),
                    keyboard=get_keyboard_main(event.obj.peer_id)
                )
            elif event.obj.text == "–ü—Ä–∞–≤–∏–ª–∞":
                logging(userinfo, "–ó–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∞–≤–∏–ª–∞")
                vk.messages.send(
                    peer_id=event.obj.peer_id,
                    message="–ó–∞–≥–ª—É—à–∫–∞ –ü—Ä–∞–≤–∏–ª–∞",
                    random_id=get_random_id(),
                    keyboard=get_keyboard_main(event.obj.peer_id)
                )
            elif event.obj.text == "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ":
                logging(userinfo, "–ó–∞–ø—Ä–æ—Å–∏–ª –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")
                main_db['steps'][str(event.obj.peer_id)
                                 ]['last_action'] = "tanks"
                main_db['tanks'][str(event.obj.peer_id)] = dict()
                main_db['tanks'][str(event.obj.peer_id)]['path'] = []

                vk.messages.send(
                    peer_id=event.obj.peer_id,
                    message="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    random_id=get_random_id(),
                    keyboard=get_tanks_kb(event.obj.peer_id)
                )
            elif event.obj.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
                del main_db['tanks'][str(event.obj.peer_id)]['path'][-1]
                kb = get_tanks_kb(event.obj.peer_id)
                if not type(kb) is bool:
                    vk.messages.send(
                        peer_id=event.obj.peer_id,
                        message="–í—ã–±–µ—Ä–∏—Ç–µ " +
                        ("–ø–æ–¥-" * len(main_db['tanks']
                                      [str(event.obj.peer_id)]['path'])) + "–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                        random_id=get_random_id(),
                        keyboard=kb
                    )
            elif event.obj.text == "–°–æ–±—ã—Ç–∏—è":
                logging(userinfo, "–ó–∞–ø—Ä–æ—Å–∏–ª —Å–æ–±—ã—Ç–∏—è")
                kb = {
                    "one_time": True,
                    "buttons": [
                        [{
                            "action": {
                                "type": "text",
                                "label": "üè† –î–æ–º–æ–π"
                            },
                            "color": "primary"
                        }]
                    ]
                }

                if len(main_db['events']) == 0:
                    vk.messages.send(
                        peer_id=event.obj.peer_id,
                        message='–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π',
                        random_id=get_random_id(),
                        keyboard=get_keyboard_main(event.obj.peer_id)
                    )
                    continue

                events_in_row = 1
                for i in range(0, len(main_db['events']), events_in_row):
                    row = []
                    for j in range(0, events_in_row):
                        if len(main_db['events']) > i + j:
                            if '–°—Ä–∞–∂–µ–Ω–∏—è' in main_db['events'][i + j]['type']:
                                add_info = main_db['events'][i + j]['type'][0] + \
                                    " vs. " + \
                                    main_db['events'][i + j]['against']
                            else:
                                add_info = main_db['events'][i + j]['type']
                            row.append({
                                "action": {
                                    "type": "text",
                                    "label": str(i + j + 1) + ". " + add_info + " " + main_db['events'][i + j]['date'] + " " + main_db['events'][i + j]['time'] + " üëÄ"
                                }, "color": "secondary"})
                    kb['buttons'].append(row)

                vk.messages.send(
                    peer_id=event.obj.peer_id,
                    message='–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.',
                    random_id=get_random_id(),
                    keyboard=json.dumps(kb)
                )
            elif event.obj.text == "–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ":
                logging(userinfo, "–ù–∞—á–∞–ª —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ")
                main_db['steps'][str(event.obj.peer_id)
                                 ]['last_action'] = 'creating_eventtype'
                kb = {
                    "one_time": True,
                    "buttons": [
                        [{
                            "action": {
                                "type": "text",
                                "label": "‚öí –°—Ä–∞–∂–µ–Ω–∏—è"
                            },
                            "color": "negative"
                        }, {
                            "action": {
                                "type": "text",
                                "label": "üë®‚Äçüè´ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
                            },
                            "color": "secondary"
                        }],
                        [{
                            "action": {
                                "type": "text",
                                "label": "üó∫ –†–∞–∑–±–æ—Ä –∫–∞—Ä—Ç—ã"
                            },
                            "color": "positive"
                        }]
                    ]
                }
                vk.messages.send(
                    peer_id=event.obj.peer_id,
                    message='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è',
                    random_id=get_random_id(),
                    keyboard=json.dumps(kb)
                )
            elif 'üëÄ' in event.obj.text:
                event_id = int(event.obj.text[:event.obj.text.find('.')]) - 1
                reged = "\nüé´ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: "
                if len(main_db['events'][event_id]['registered']) == 0:
                    reged = "\nüé´ –ù–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
                registered = False
                for user, member_type in main_db['events'][event_id]['registered']:
                    if user == event.obj.peer_id:
                        registered = True
                    useri = vk.users.get(
                        user_ids=user, fields='first_name_nom', name_case='nom')[0]

                    try:
                        namei = users_database[str(user)]['name']
                    except:
                        namei = useri['first_name'] + " " + useri['last_name']

                    try:
                        nicknamei = users_database[str(user)]['nickname']
                    except:
                        nicknamei = 'NONE'

                    member_typei = '–û—Å–Ω–æ–≤–Ω–æ–π' if member_type == 'main' else '–ó–∞–ø–∞—Å–Ω–æ–π'

                    reged += "\n‚ñ™Ô∏è‚ñ™Ô∏è ‚Ü™Ô∏è " + namei + \
                        " (" + nicknamei + "): " + member_typei
                answer = "‚ûñ‚ñ´Ô∏è –°–æ–±—ã—Ç–∏–µ ‚ñ´Ô∏è‚ûñ\n" + main_db['events'][event_id]['type'] + "\nüìÜ " + main_db['events'][event_id]['date'] + "\n‚åöÔ∏è " + main_db['events'][event_id]['time'] + "-UTC+3\nüê∫ –ö–æ–º–∞–Ω–¥–∏—Ä: " + main_db['events'][event_id]['komandor'] + \
                    "\nüéØ –ü—Ä–æ—Ç–∏–≤: " + main_db['events'][event_id]['against'] + "\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ö–æ–ª-–≤–æ –º–µ—Å—Ç: " + str(
                        main_db['events'][event_id]['main_q']) + " (+" + str(main_db['events'][event_id]['add_q']) + ")" + reged

                if not registered:

                    kb = {
                        "one_time": True,
                        "buttons": [
                            [{
                                "action": {
                                    "type": "text",
                                    "label": "üè† –î–æ–º–æ–π"
                                },
                                "color": "secondary"
                            }],
                            [{
                                "action": {
                                    "type": "text",
                                    "label": "–£—á–∞—Å—Ç–≤—É—é!"
                                },
                                "color": "positive"
                            }, {
                                "action": {
                                    "type": "text",
                                    "label": "–ù–µ –ø—Ä–∏–π–¥—É!"
                                },
                                "color": "negative"
                            }],
                            [{
                                "action": {
                                    "type": "text",
                                    "label": "–í–æ–∑–º–æ–∂–Ω–æ —É—á–∞–≤—Å—Ç–≤—É—é."
                                },
                                "color": "primary"
                            }]
                        ]
                    }
                else:
                    kb = {
                        "one_time": True,
                        "buttons": [
                            [{
                                "action": {
                                    "type": "text",
                                    "label": "üè† –î–æ–º–æ–π"
                                },
                                "color": "secondary"
                            }]
                        ]
                    }

                    answer += "\n\n‚ûñ‚ñ´Ô∏è –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚òëÔ∏è ‚ñ´Ô∏è‚ûñ"

                vk.messages.send(
                    peer_id=event.obj.peer_id,
                    message=answer,
                    keyboard=json.dumps(kb),
                    random_id=get_random_id()
                )

                main_db['steps'][str(event.obj.peer_id)
                                 ]['last_action'] = "regevent" + str(event_id)
            elif event.obj.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π":
                logging(userinfo, "–ó–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É —Å–æ–±—ã—Ç–∏–π")
                final = ""

                search_db = main_db['events'] + main_db['events_archive']

                stats_data = ""

                for user, data in users_database.items():
                    user_inf = vk.users.get(
                        user_ids=user, fields='first_name_nom', name_case='nom')[0]
                    if not 'name' in data:
                        data['name'] = user_inf['first_name'] + \
                            ' ' + user_inf['last_name']

                    if not 'nickname' in data:
                        data['nickname'] = 'unknown'

                    row = "<tr><td class='small'>" + \
                        data['name'].split()[0] + "</td><td class='small'>" + \
                        data['nickname'] + "</td><td>"

                    ### GETTING STATS ###

                    total = 0
                    week = 0
                    month = 0
                    fights = 0
                    trainings = 0
                    maps = 0

                    for eventi in search_db:
                        if str(user) in list(map(lambda x: str(x[0]), eventi['registered'])):
                            if '–°—Ä–∞–∂–µ–Ω–∏—è' in eventi['type']:
                                fights += 1

                            if '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞' in eventi['type']:
                                trainings += 1

                            if '–†–∞–∑–±–æ—Ä' in eventi['type']:
                                maps += 1

                            if time.time() - 604800 <= int(datetime.datetime.strptime(eventi['date'], '%d.%m.%Y').strftime("%s")):
                                week += 1
                            if time.time() - 2678400 <= int(datetime.datetime.strptime(eventi['date'], '%d.%m.%Y').strftime("%s")):
                                month += 1

                            total += 1

                    row += str(fights) + "</td><td>" + str(trainings) + "</td><td>" + str(maps) + "</td><td>" + \
                        str(week) + "</td><td>" + str(month) + \
                        "</td><td>" + str(total) + "</td></tr>"
                    stats_data += row

                imgkit.from_url("http://blinamalina.ru/bot/vk/test/stats.php?stats=" +
                                stats_data, 'out.jpg', options={"encoding": "utf-8", "xvfb": ""})
                answer = vk_api.VkUpload(vk_session).photo_messages(
                    photos='out.jpg', peer_id=event.obj.peer_id)[0]
                access_key = answer['access_key']
                for size in answer['sizes']:
                    if size['type'] == "z":
                        photo = size['url']
                        break

                attachment = 'photo{0}_{1}_{2}'.format(
                    answer['owner_id'], answer['id'], access_key)
                vk.messages.send(
                    peer_id=event.obj.peer_id,
                    message='–í–æ—É–≤–æ—É–≤–æ—É',
                    random_id=get_random_id(),
                    keyboard=get_keyboard_main(event.obj.peer_id),
                    attachment=attachment
                )

            elif event.obj.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏":
                logging(userinfo, "–ó–∞–ø—Ä–æ—Å–∏–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏")
                kb = {
                    "one_time": True,
                    "buttons": [
                        [{
                            "action": {
                                "type": "text",
                                "label": "üè† –î–æ–º–æ–π"
                            },
                            "color": "primary"
                        }]
                    ]
                }

                if len(main_db['events']) == 0:
                    vk.messages.send(
                        peer_id=event.obj.peer_id,
                        message='–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π',
                        random_id=get_random_id(),
                        keyboard=get_keyboard_main(event.obj.peer_id)
                    )
                    continue

                events_in_row = 1
                for i in range(0, len(main_db['events']), events_in_row):
                    row = []
                    for j in range(0, events_in_row):
                        if len(main_db['events']) > i + j:
                            if '–°—Ä–∞–∂–µ–Ω–∏—è' in main_db['events'][i + j]['type']:
                                add_info = main_db['events'][i + j]['type'][0] + \
                                    " " + main_db['events'][i + j]['against']
                            else:
                                add_info = main_db['events'][i + j]['type']

                            label = str(i + j + 1) + ". " + add_info + " " + \
                                main_db['events'][i + j]['date'] + " " + \
                                main_db['events'][i + j]['time'] + " ‚úèÔ∏è"

                            if add_info > 25:
                                label = str(i + j + 1) + ". " + add_info[:23] + ".. " + main_db['events'][i +
                                                                                                          j]['date'][:-5] + " " + main_db['events'][i + j]['time'] + " ‚úèÔ∏è"

                            print(label, len(label))

                            row.append({
                                "action": {
                                    "type": "text",
                                    "label": label
                                }, "color": "secondary"})
                    kb['buttons'].append(row)

                vk.messages.send(
                    peer_id=event.obj.peer_id,
                    message='–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ',
                    random_id=get_random_id(),
                    keyboard=json.dumps(kb)
                )

            elif event.obj.text == '‚úèÔ∏è':

                event_id = int(main_db['steps'][str(
                    event.obj.peer_id)]['last_action'][9:])
                kb = {
                    "one_time": True,
                    "buttons": [
                        [{
                            "action": {
                                "type": "text",
                                "label": "üè† –î–æ–º–æ–π"
                            },
                            "color": "secondary"
                        }]
                    ]
                }
                settings_in_row = 3
                for i in range(0, len(params.keys()) - 1, settings_in_row):
                    row = []
                    for j in range(settings_in_row):
                        if i + j < len(params.keys()) - 1:
                            row.append({
                                "action": {
                                    "type": "text",
                                    "label": params.keys()[i + j]
                                },
                                "color": "primary"
                            })
                    kb['buttons'].append(row)

                print(kb)

                vk.messages.send(
                    peer_id=event.obj.peer_id,
                    message='–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                    keyboard=json.dumps(kb),
                    random_id=get_random_id()
                )
            elif event.obj.text == "–°–æ—Å—Ç–∞–≤ –∫–ª–∞–Ω–∞":
                msg = "‚ûñ‚ûñüîπ –°–æ—Å—Ç–∞–≤ –∫–ª–∞–Ω–∞ üîπ‚ûñ‚ûñ\n"
                i = 1
                for user, data in users_database.items():
                    user_inf = vk.users.get(
                        user_ids=user, fields='first_name_nom', name_case='nom')[0]
                    if not 'name' in data:
                        data['name'] = user_inf['first_name']

                    if not 'nickname' in data:
                        data['nickname'] = 'unknown'

                    msg += str(i) + " üî∞ "
                    msg += data['nickname'] + \
                        " (" + data['name'].split()[0] + ")\n"

                    i += 1

                vk.messages.send(
                    peer_id=event.obj.peer_id,
                    message=msg,
                    keyboard=get_keyboard_main(event.obj.peer_id),
                    random_id=get_random_id()
                )
            elif event.obj.text == 'üö´':
                logging(userinfo, "–£–¥–∞–ª–∏–ª —Å–æ–±—ã—Ç–∏–µ")
                event_id = int(main_db['steps'][str(
                    event.obj.peer_id)]['last_action'][9:])
                del main_db['events'][event_id]

                vk.messages.send(
                    peer_id=event.obj.peer_id,
                    message='–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!',
                    keyboard=get_keyboard_main(event.obj.peer_id),
                    random_id=get_random_id()
                )
            elif event.obj.text == '‚ùé':
                logging(userinfo, "–ó–∞–≤–µ—Ä—à–∏–ª —Å–æ–±—ã—Ç–∏–µ")
                event_id = int(main_db['steps'][str(
                    event.obj.peer_id)]['last_action'][9:])
                ev_type = main_db['events'][event_id]['type']
                if '–°—Ä–∞–∂–µ–Ω–∏—è' in ev_type:
                    main_db['steps'][str(event.obj.peer_id)]['last_action'] = 'confirmevent_outcome_' + \
                        main_db['steps'][str(
                            event.obj.peer_id)]['last_action'][9:]

                    kb = {
                        "one_time": True,
                        "buttons": [
                            [{
                                "action": {
                                    "type": "text",
                                    "label": "‚úÖ –ü–æ–±–µ–¥–∞"
                                },
                                "color": "positive"
                            }, {
                                "action": {
                                    "type": "text",
                                    "label": "‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ"
                                },
                                "color": "negative"
                            }], [{
                                "action": {
                                    "type": "text",
                                    "label": "‚öîÔ∏è –ù–∏—á—å—è"
                                },
                                "color": "secondary"
                            }]
                        ]
                    }
                    vk.messages.send(
                        peer_id=event.obj.peer_id,
                        message='–ò—Å—Ö–æ–¥ —Å–æ–±—ã—Ç–∏—è',
                        keyboard=json.dumps(kb),
                        random_id=get_random_id()
                    )
                elif '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞' in ev_type:
                    main_db['steps'][str(event.obj.peer_id)]['last_action'] = 'confirmevent_outcome_' + \
                        main_db['steps'][str(
                            event.obj.peer_id)]['last_action'][9:]

                    kb = {
                        "one_time": True,
                        "buttons": [
                            [{
                                "action": {
                                    "type": "text",
                                    "label": "üòÅ –û—Ç–ª–∏—á–Ω–æ"
                                },
                                "color": "positive"
                            }, {
                                "action": {
                                    "type": "text",
                                            "label": "‚úÖ –•–æ—Ä–æ—à–æ"
                                },
                                "color": "positive"
                            }], [{
                                "action": {
                                    "type": "text",
                                    "label": "‚úå –ù–æ—Ä–º–∞–ª—å–Ω–æ"
                                },
                                "color": "secondary"
                            }], [{
                                "action": {
                                    "type": "text",
                                    "label": "‚òπÔ∏è –ü–ª–æ—Ö–æ"
                                },
                                "color": "negative"
                            }, {
                                "action": {
                                    "type": "text",
                                    "label": "üò£ –£–∂–∞—Å–Ω–æ"
                                },
                                "color": "negative"
                            }]
                        ]
                    }
                    vk.messages.send(
                        peer_id=event.obj.peer_id,
                        message='–û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
                        keyboard=json.dumps(kb),
                        random_id=get_random_id()
                    )
                else:
                    main_db['events'][event_id]['outcome'] = '‚òëÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ'
                    choose_players(event, event_id)
                    main_db['steps'][str(event.obj.peer_id)]['last_action'] = 'confirmevent_final_' + \
                        main_db['steps'][str(
                            event.obj.peer_id)]['last_action'][9:]

            elif '‚úèÔ∏è' in event.obj.text:
                event_id = int(event.obj.text[:event.obj.text.find('.')]) - 1
                main_db['steps'][str(event.obj.peer_id)
                                 ]['last_action'] = 'editevent' + str(event_id)
                kb = {
                    "one_time": True,
                    "buttons": [
                        [{
                            "action": {
                                "type": "text",
                                "label": "üè† –î–æ–º–æ–π"
                            },
                            "color": "secondary"
                        }],
                        [{
                            "action": {
                                "type": "text",
                                "label": "‚úèÔ∏è"
                            },
                            "color": "primary"
                        }, {
                            "action": {
                                "type": "text",
                                "label": "üö´"
                            },
                            "color": "negative"
                        },
                            {
                                "action": {
                                    "type": "text",
                                    "label": "‚ùé"
                                },
                                "color": "positive"
                        }]
                    ]
                }

                vk.messages.send(
                    peer_id=event.obj.peer_id,
                    message='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\nüö´ –£–¥–∞–ª–∏—Ç—å\n‚ùé –ó–∞–≤–µ—Ä—à–∏—Ç—å',
                    keyboard=json.dumps(kb),
                    random_id=get_random_id()
                )
            else:
                try:
                    ev = main_db['steps'][str(
                        event.obj.peer_id)]['last_action']
                    if ev == "":
                        raise KeyError
                except KeyError:
                    vk.messages.send(
                        peer_id=event.obj.peer_id,
                        message='–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã',
                        keyboard=get_keyboard_main(event.obj.peer_id),
                        random_id=get_random_id()
                    )
                    continue

                if ev == "leave_request":
                    to_edit = vk.messages.send(
                        peer_id=event.obj.peer_id,
                        message='–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∫–∞... –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–≤—è–∑—å —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ WoT...',
                        random_id=get_random_id()
                    )
                    if not check_if_player_exists(event.obj.text):
                        vk.messages.send(
                            peer_id=event.obj.peer_id,
                            message='–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–π –Ω–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞, –∞ —Ç–∞–∫–∂–µ –≤ —Ç–æ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "XBOX"',
                            keyboard=get_keyboard_main(event.obj.peer_id),
                            random_id=get_random_id()
                        )
                        main_db['steps'][str(
                            event.obj.peer_id)]['last_action'] = ""
                    else:
                        users_database[str(event.obj.peer_id)
                                       ]['nickname'] = event.obj.text
                        vk.messages.edit(
                            peer_id=event.obj.peer_id,
                            message_id=to_edit,
                            message='–ù–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.'
                        )

                        kb = {
                            "one_time": True,
                            "buttons": [
                                [{
                                    "action": {
                                        "type": "text",
                                        "label": userinfo['first_name'] + " " + userinfo['last_name']
                                    },
                                    "color": "primary"
                                }]
                            ]
                        }

                        vk.messages.send(
                            peer_id=event.obj.peer_id,
                            message="–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
                            random_id=get_random_id(),
                            keyboard=json.dumps(kb)
                        )
                        main_db['steps'][str(
                            event.obj.peer_id)]['last_action'] = 'set_name'
                elif 'confirmevent_' in ev:
                    if ev.split('_')[1] == "outcome":
                        main_db['events'][int(
                            ev.split('_')[2])]['outcome'] = event.obj.text
                        main_db['steps'][str(
                            event.obj.peer_id)]['last_action'] = "confirmevent_final_" + ev.split('_')[2]
                        choose_players(event, int(ev.split('_')[2]))
                    elif ev.split('_')[1] == "final":
                        main_db['events'][int(
                            ev.split('_')[2])]['registered'] = []
                        players = ""
                        for user in event.obj.text.split():
                            main_db['events'][int(ev.split('_')[2])]['registered'].append(
                                [users_database.keys()[int(user)-1], 'main'])
                            data = users_database[users_database.keys()[
                                int(user)-1]]
                            user_inf = vk.users.get(user_ids=users_database.keys()[int(
                                user)-1], fields='first_name_nom', name_case='nom')[0]
                            if not 'name' in data:
                                data['name'] = user_inf['first_name'] + \
                                    ' ' + user_inf['last_name']

                            if not 'nickname' in data:
                                data['nickname'] = 'unknown'

                            players += " üî∏ " + \
                                data['nickname'] + " (" + data['name'] + ")\n"

                        eventinfo = main_db['events'][int(ev.split('_')[2])]

                        vk.messages.send(
                            peer_id=event.obj.peer_id,
                            message='–°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!',
                            keyboard=get_keyboard_main(event.obj.peer_id),
                            random_id=get_random_id()
                        )

                        if '–°—Ä–∞–∂–µ–Ω–∏—è' in eventinfo['type']:
                            vk.messages.send(
                                peer_id=main_conversation,
                                message='‚öîÔ∏è –°—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚öîÔ∏è\n‚öîÔ∏è [N_ERA] vs. [' + eventinfo['against'] + '] ‚öîÔ∏è\nüßß –ò—Å—Ö–æ–¥ –±–æ—è: ' +
                                eventinfo['outcome'] + "\nüê∫ –ö–æ–º–∞–Ω–¥–∏—Ä: " + eventinfo['komandor'] +
                                "\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ–±—ã—Ç–∏—è:\n\n" + players,
                                random_id=get_random_id()
                            )
                        elif '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞' in eventinfo['type']:
                            vk.messages.send(
                                peer_id=main_conversation,
                                message='‚öîÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚öîÔ∏è\n‚öîÔ∏è [N_ERA] vs. [' + eventinfo['against'] + '] ‚öîÔ∏è\nüßß –ò—Å—Ö–æ–¥ –±–æ—è: ' +
                                eventinfo['outcome'] + "\nüê∫ –ö–æ–º–∞–Ω–¥–∏—Ä: " + eventinfo['komandor'] +
                                "\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ–±—ã—Ç–∏—è:\n\n" + players,
                                random_id=get_random_id()
                            )

                        main_db['events_archive'].append(
                            main_db['events'][int(ev.split('_')[2])])
                        del main_db['events'][int(ev.split('_')[2])]

                elif ev == "set_name":
                    users_database[str(event.obj.peer_id)
                                   ]['name'] = event.obj.text
                    vk.messages.send(
                        peer_id=event.obj.peer_id,
                        message="–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É. –ï—Å–ª–∏ –≤—ã –Ω–µ —Å–¥–µ–ª–∞–µ—Ç–µ —ç—Ç–æ–≥–æ, –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.",
                        random_id=get_random_id(),
                        keyboard=get_keyboard__request()
                    )
                    main_db['steps'][str(event.obj.peer_id)
                                     ]['last_action'] = 'group_request'
                elif ev == "group_request":
                    main_db['steps'][str(event.obj.peer_id)
                                     ]['last_action'] = ''
                    vk.messages.send(
                        peer_id=event.obj.peer_id,
                        message="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è üòâ",
                        random_id=get_random_id(),
                        keyboard=get_keyboard_main(event.obj.peer_id)
                    )

                    emojies = [u'üòÄ', u'üòÉ', u'üòÑ', u'üòÅ', u'üòÜ', u'üòÖ', u'‚ò∫Ô∏è', u'üòä', u'üòá', u'üôÇ', u'üôÉ', u'üòâ', u'üòå', u'üòç', u'üòó', u'üòô', u'üòö', u'üòã', u'üòõ', u'üòù', u'üòú', u'ü§™', u'ü§®', u'üßê', u'ü§ì', u'üòé', u'ü§©', u'ü•≥', u'üòè', u'ü§ó', u'ü•∂', u'ü•¥', u'ü§ê', u'üò∑', u'ü§†', u'ü§ë', u'ü§§', u'ü§°', u'üòà', u'üëª', u'ü§ñ', u'üëæ', u'üò∫',
                               u'üò∏', u'üòπ', u'üòª', u'üòº', u'üòΩ', u'üê∂', u'üê±', u'üê≠', u'ü¶ä', u'üêª', u'üêº', u'üê®', u'üêØ', u'ü¶Å', u'üêÆ', u'üê∑', u'üêΩ', u'üê∏', u'üêµ', u'üôà', u'üôâ', u'üôä', u'üêí', u'üêß', u'üê¶', u'', u'üê§', u'üê£', u'üê•', u'ü¶Ü', u'ü¶Ö', u'ü¶â', u'üê∫', u'üêó', u'üê¥', u'ü¶Ñ', u'üêù', u'üêõ', u'ü¶ã', u'üêå', u'üêû', u'üêú', u'ü¶ü', u'ü¶ó']
                    choosed_emoji = choice(emojies)

                    while choosed_emoji in main_db['requests']:
                        choosed_emoji = choice(emojies)

                    main_db['requests'][choosed_emoji] = event.obj.peer_id
                    player_info = get_player_info(
                        users_database[str(event.obj.peer_id)]['nickname'])
                    player_info__str = "–í –∏–≥—Ä–µ —Å " + player_info['registered'] + "\n–°—ã–≥—Ä–∞–Ω–æ –±–æ–µ–≤: " + player_info['fights'] + "\n–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: " + player_info['wins_coof'] + "\n–ú–µ—Ç–∫–æ—Å—Ç—å: " + player_info['accurance_coof'] + "\n–í—ã–∂–∏–ª: " + player_info['alived_coof'] + "\n–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–Ω: " + player_info['avg_damage_per_fight'] + "\n–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: " + player_info['efficiency'] + \
                        "\nWN7: " + player_info['WN7'] + "\nWN8: " + player_info['WN8'] + "\n‚ûñ‚ûñ‚ûñ‚ûñ –ù–µ–¥–µ–ª—è ‚ûñ‚ûñ‚ûñ‚ûñ\n–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: " + player_info['w_efficiency'] + "\nWN7: " + player_info['w_wn7'] + \
                        "\nWN8: " + player_info['w_wn8'] + "\n‚ûñ‚ûñ‚ûñ‚ûñ –ú–µ—Å—è—Ü ‚ûñ‚ûñ‚ûñ‚ûñ\n–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: " + \
                        player_info['m_efficiency'] + "\nWN7:" + \
                        player_info['m_wn7'] + "\nWN8: " + player_info['m_wn8']

                    vk.messages.send(
                        peer_id=2000000001,
                        message="–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω üòâ\n\n–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫: " +
                        users_database[str(event.obj.peer_id)]['nickname'] + "\n–ò–º—è: " + users_database[str(
                            event.obj.peer_id)]['name'] + "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" + player_info__str + "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ",
                        random_id=get_random_id(),
                        keyboard=get_keyboard__inline_requests(choosed_emoji)
                    )
                    logging(userinfo, "–û—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É")
                elif ev == "tanks":
                    main_db['tanks'][str(event.obj.peer_id)]['path'].append(
                        event.obj.text)
                    kb = get_tanks_kb(event.obj.peer_id)
                    if not type(kb) is bool:
                        vk.messages.send(
                            peer_id=event.obj.peer_id,
                            message="–í—ã–±–µ—Ä–∏—Ç–µ " +
                            ("–ø–æ–¥-" * len(main_db['tanks']
                                          [str(event.obj.peer_id)]['path'])) + "–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                            random_id=get_random_id(),
                            keyboard=kb
                        )

                elif 'creating_event' in ev:
                    if not 'path' in main_db['steps'][str(event.obj.peer_id)]:
                        main_db['steps'][str(
                            event.obj.peer_id)]['path'] = list()
                    main_db['steps'][str(event.obj.peer_id)]['path'].append(
                        event.obj.text)

                    kb = {
                        "one_time": True,
                        "buttons": [
                        ]
                    }

                    if ev[14:] == 'type':
                        main_db['steps'][str(
                            event.obj.peer_id)]['last_action'] = "creating_eventagainst"
                        if "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" in event.obj.text:
                            kb['buttons'].append([{
                                "action": {
                                    "type": "text",
                                    "label": "–ù–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞"
                                },
                                "color": "positive"
                            }])
                        vk.messages.send(
                            peer_id=event.obj.peer_id,
                            message='–ü—Ä–æ—Ç–∏–≤ –∫–æ–≥–æ –≤—ã—Å—Ç—É–ø–∞–µ–º?',
                            keyboard=json.dumps(kb),
                            random_id=get_random_id()
                        )
                    elif ev[14:] == 'against':
                        main_db['steps'][str(
                            event.obj.peer_id)]['last_action'] = "creating_eventdate"
                        import datetime
                        kb['buttons'].append([{
                            "action": {
                                "type": "text",
                                "label": datetime.datetime.now().strftime("%d.%m.%Y")
                            },
                            "color": "secondary"
                        }])
                        vk.messages.send(
                            peer_id=event.obj.peer_id,
                            message='–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è?',
                            keyboard=json.dumps(kb),
                            random_id=get_random_id()
                        )
                    elif ev[14:] == 'date':
                        main_db['steps'][str(
                            event.obj.peer_id)]['last_action'] = "creating_eventtime"
                        kb['buttons'].append([{
                            "action": {
                                "type": "text",
                                "label": "21:00"
                            },
                            "color": "secondary"
                        }, {
                            "action": {
                                "type": "text",
                                "label": "22:00"
                            },
                            "color": "secondary"
                        }, {
                            "action": {
                                "type": "text",
                                "label": "23:00"
                            },
                            "color": "secondary"
                        }])
                        vk.messages.send(
                            peer_id=event.obj.peer_id,
                            message='–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è?',
                            keyboard=json.dumps(kb),
                            random_id=get_random_id()
                        )
                    elif ev[14:] == 'time':
                        main_db['steps'][str(
                            event.obj.peer_id)]['last_action'] = "creating_eventkomandor"
                        kb['buttons'].append([{
                            "action": {
                                "type": "text",
                                "label": "Wysmoke"
                            },
                            "color": "primary"
                        }])
                        vk.messages.send(
                            peer_id=event.obj.peer_id,
                            message='–ö—Ç–æ –∫–æ–º–∞–Ω–¥–∏—Ä?',
                            keyboard=json.dumps(kb),
                            random_id=get_random_id()
                        )
                    elif ev[14:] == 'komandor':
                        main_db['steps'][str(
                            event.obj.peer_id)]['last_action'] = "creating_eventmain_q"
                        kb['buttons'].append([{
                            "action": {
                                "type": "text",
                                "label": "5"
                            },
                            "color": "primary"
                        }, {
                            "action": {
                                "type": "text",
                                "label": "10"
                            },
                            "color": "primary"
                        }])
                        vk.messages.send(
                            peer_id=event.obj.peer_id,
                            message='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç?',
                            keyboard=json.dumps(kb),
                            random_id=get_random_id()
                        )
                    elif ev[14:] == 'main_q':
                        main_db['steps'][str(
                            event.obj.peer_id)]['last_action'] = "creating_eventadd_q"
                        kb['buttons'].append([{
                            "action": {
                                "type": "text",
                                "label": "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
                            },
                            "color": "primary"
                        }])
                        kb['buttons'].append([{
                            "action": {
                                "type": "text",
                                "label": "5"
                            },
                            "color": "primary"
                        }, {
                            "action": {
                                "type": "text",
                                "label": "10"
                            },
                            "color": "primary"
                        }])
                        vk.messages.send(
                            peer_id=event.obj.peer_id,
                            message='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∞—Å–Ω—ã—Ö?',
                            keyboard=json.dumps(kb),
                            random_id=get_random_id()
                        )
                    elif ev[14:] == "add_q":
                        vk.messages.send(
                            peer_id=admins_conversation,
                            message='‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ ‚ùóÔ∏è\n–°–æ—Å—Ç–æ–∏—Ç—Å—è –±–∏—Ç–≤–∞ –ø—Ä–æ—Ç–∏–≤ ' + main_db['steps'][str(event.obj.peer_id)]['path'][1] + ". \n–¢–∏–ø —Å—Ä–∞–∂–µ–Ω–∏—è: " + main_db['steps'][str(event.obj.peer_id)]['path'][0] + ".\n" + main_db['steps'][str(event.obj.peer_id)]['path'][2] + " " + main_db['steps'][str(
                                event.obj.peer_id)]['path'][3] + "-UTC+3\n–ú–∏—Å—Å–∏–µ–π –∫–æ–º–∞–Ω–¥—É–µ—Ç:\n‚ûñ‚ûñ " + main_db['steps'][str(event.obj.peer_id)]['path'][4] + " ‚ûñ‚ûñ\n" + main_db['steps'][str(event.obj.peer_id)]['path'][5] + " (+" + main_db['steps'][str(event.obj.peer_id)]['path'][6] + ")",
                            keyboard=json.dumps(kb),
                            random_id=get_random_id()
                        )

                        try:
                            int(str(main_db['steps']
                                    [str(event.obj.peer_id)]['path'][6]))
                        except ValueError:
                            main_db['steps'][str(
                                event.obj.peer_id)]['path'][6] = 0

                        main_db['events'].append({
                            'against': main_db['steps'][str(event.obj.peer_id)]['path'][1],
                            'type': main_db['steps'][str(event.obj.peer_id)]['path'][0],
                            'date': main_db['steps'][str(event.obj.peer_id)]['path'][2],
                            'time': main_db['steps'][str(event.obj.peer_id)]['path'][3],
                            'main_q': int(str(main_db['steps'][str(event.obj.peer_id)]['path'][5])),
                            'add_q': int(str(main_db['steps'][str(event.obj.peer_id)]['path'][6])),
                            'komandor': main_db['steps'][str(event.obj.peer_id)]['path'][4],
                            'registered': []
                        })

                        vk.messages.send(
                            peer_id=event.obj.peer_id,
                            message='–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!',
                            keyboard=get_keyboard_main(event.obj.peer_id),
                            random_id=get_random_id()
                        )

                        main_db['steps'][str(
                            event.obj.peer_id)]['last_action'] = ""
                        del main_db['steps'][str(event.obj.peer_id)]['path']
                elif 'regevent' in ev:
                    logging(userinfo, event.obj.text + " –≤ —Å–æ–±—ã—Ç–∏–∏")
                    event_id = int(ev[8:])
                    if event.obj.text == "–£—á–∞—Å—Ç–≤—É—é!":
                        main_db['events'][event_id]['main_q'] -= 1
                        main_db['events'][event_id]['registered'].append(
                            [event.obj.peer_id, 'main'])
                    elif event.obj.text == "–ù–µ –ø—Ä–∏–π–¥—É!":
                        vk.messages.send(
                            peer_id=event.obj.peer_id,
                            message="–ü–æ–Ω—è–ª —Ç–µ–±—è.",
                            keyboard=get_keyboard_main(event.obj.peer_id),
                            random_id=get_random_id()
                        )
                        continue
                    else:
                        main_db['events'][event_id]['add_q'] -= 1
                        main_db['events'][event_id]['registered'].append(
                            [event.obj.peer_id, 'add'])

                    vk.messages.send(
                        peer_id=event.obj.peer_id,
                        message='–ü—Ä–∏–Ω—è—Ç–æ! –ñ–¥–µ–º —Ç–µ–±—è –≤ ' +
                        main_db['events'][event_id]['date'] + " " +
                        main_db['events'][event_id]['time'] +
                        " –ø–æ –º—Å–∫ –≤ –∏–≥—Ä–µ!",
                        keyboard=get_keyboard_main(event.obj.peer_id),
                        random_id=get_random_id()
                    )

                    main_db['steps'][str(event.obj.peer_id)
                                     ]['last_action'] = ""
                elif 'editevent' in ev:
                    if event.obj.text in params.keys():
                        main_db['steps'][str(
                            event.obj.peer_id)]['last_action'] = "setparam_" + params[event.obj.text] + "_" + ev[9:]

                        kb = {
                            "one_time": True,
                            "buttons": [
                                [{
                                    "action": {
                                        "type": "text",
                                        "label": "üè† –î–æ–º–æ–π"
                                    },
                                    "color": "secondary"
                                }]
                            ]
                        }

                        if params[event.obj.text] == 'type':
                            kb = {
                                "one_time": True,
                                "buttons": [
                                    [{
                                        "action": {
                                            "type": "text",
                                            "label": "üè† –î–æ–º–æ–π"
                                        },
                                        "color": "secondary"
                                    }], [{
                                        "action": {
                                            "type": "text",
                                            "label": "‚öí –°—Ä–∞–∂–µ–Ω–∏—è"
                                        },
                                        "color": "negative"
                                    }, {
                                        "action": {
                                            "type": "text",
                                            "label": "üë®‚Äçüè´ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
                                        },
                                        "color": "secondary"
                                    }],
                                    [{
                                        "action": {
                                            "type": "text",
                                            "label": "üó∫ –†–∞–∑–±–æ—Ä –∫–∞—Ä—Ç—ã"
                                        },
                                        "color": "positive"
                                    }]
                                ]
                            }

                        vk.messages.send(
                            peer_id=event.obj.peer_id,
                            message='–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
                            keyboard=json.dumps(kb),
                            random_id=get_random_id()
                        )
                elif 'setparam_' in ev:
                    main_db['events'][int(ev.split('_')[2])][ev.split('_')[
                        1]] = event.obj.text
                    main_db['steps'][str(event.obj.peer_id)
                                     ]['last_action'] = ""
                    vk.messages.send(
                        peer_id=event.obj.peer_id,
                        message='–ü—Ä–∏–Ω—è—Ç–æ!',
                        keyboard=get_keyboard_main(event.obj.peer_id),
                        random_id=get_random_id()
                    )
                else:
                    vk.messages.send(
                        peer_id=event.obj.peer_id,
                        message='–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã',
                        keyboard=get_keyboard_main(event.obj.peer_id),
                        random_id=get_random_id()
                    )
                    continue
        else:
            try:
                if "–ü—Ä–∏–Ω—è—Ç—å" in event.obj.text:
                    if check_admin(event.obj.from_id):
                        vk.messages.send(
                            peer_id=event.obj.peer_id,
                            message='–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏',
                            random_id=get_random_id()
                        )
                        to_add = main_db['requests'][event.obj.text[event.obj.text.find(
                            "–ü—Ä–∏–Ω—è—Ç—å") + 8:]]

                        vk.messages.send(
                            peer_id=to_add,
                            message='‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω –ø—Ä–∏–Ω—è—Ç–∞! –ß–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É.',
                            random_id=get_random_id(),
                            keyboard=get_keyboard_main(to_add)
                        )
                        del main_db['requests'][event.obj.text[event.obj.text.find(
                            "–ü—Ä–∏–Ω—è—Ç—å") + 8:]]
                    else:
                        vk.messages.send(
                            peer_id=event.obj.peer_id,
                            message='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!',
                            random_id=get_random_id(),
                            keyboard=get_keyboard_main(event.obj.peer_id)
                        )
                elif "–û—Ç–∫–ª–æ–Ω–∏—Ç—å" in event.obj.text:
                    if check_admin(event.obj.from_id):
                        vk.messages.send(
                            peer_id=event.obj.peer_id,
                            message='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏',
                            random_id=get_random_id()
                        )
                        to_add = main_db['requests'][event.obj.text[event.obj.text.find(
                            "–û—Ç–∫–ª–æ–Ω–∏—Ç—å") + 9:]]

                        vk.messages.send(
                            peer_id=to_add,
                            message='‚ö†Ô∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞! –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É, –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.',
                            random_id=get_random_id(),
                            keyboard=get_keyboard_main(to_add)
                        )
                        del main_db['requests'][event.obj.text[event.obj.text.find(
                            "–û—Ç–∫–ª–æ–Ω–∏—Ç—å") + 9:]]
                    else:
                        vk.messages.send(
                            peer_id=event.obj.peer_id,
                            message='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!',
                            random_id=get_random_id()
                        )
            except KeyError:
                vk.messages.send(
                    peer_id=event.obj.peer_id,
                    message='–û—à–∏–±–∫–∞',
                    random_id=get_random_id()
                )

    autosave_db_step_2()

    time.sleep(longpool_sleep)
