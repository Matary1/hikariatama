#from config import *
script_path = os.path.dirname(os.path.abspath(__file__)).replace('\\', '/') + "/"
fsm_path = script_path + 'fsm.json'

texts = {
	'rus': {
		'working_hours': '_–¢–µ–∞—Ç—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00 –¥–æ 19:00 üòå_',
		'idk_answer': 'ü§∑‚Äç‚ôÇÔ∏è *–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–æ—á–Ω—ã–º –º–µ–Ω—é. –ï—Å–ª–∏ –í–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ *–¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–µ–∞—Ç—Ä–∞*, –Ω–∞–ø–∏—Å–∞–≤ –Ω–∞ –ø–æ—á—Ç—É *support-tuz@bileton.ru* (_–µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 8:00 –¥–æ 20:00_)',
		'main_menu': '*–ü—Ä–∏–≤–µ—Ç!* üëã –Ø –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ *–ö–∞–∑–∞–Ω—Å–∫–æ–≥–æ –¢–Æ–ó–∞!* –ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—à–µ–º —Ç–µ–∞—Ç—Ä–µ, —É–∑–Ω–∞—Ç—å –µ–≥–æ –∏—Å—Ç–æ—Ä–∏—é, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–∏–ª–µ—Ç—ã.\n_–ê–¥—Ä–µ—Å: _[–≥. –ö–∞–∑–∞–Ω—å, —É–ª. –û—Å—Ç—Ä–æ–≤—Å–∫–æ–≥–æ, 10](https://yandex.ru/maps/43/kazan/?from=api-maps&ll=49.113313%2C55.790875&mode=routes&rtext=~55.789389%2C49.113386&rtt=auto&ruri=~&utm_source=api-maps&z=16)\n\n–¢–∞–∫–∂–µ, —É –Ω–∞—Å –µ—Å—Ç—å –Ω–∞–≤—ã–∫ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –ø–æ–º–æ—â–Ω–∏–∫–µ –ê–ª–∏—Å–∞! –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ, —Å–∫–∞–∂–∏—Ç–µ "–ê–ª–∏—Å–∞, –∑–∞–ø—É—Å—Ç–∏ –Ω–∞–≤—ã–∫ –¢–µ–∞—Ç—Ä –Æ–Ω–æ–≥–æ –ó—Ä–∏—Ç–µ–ª—è"',
		'help': '–ï—Å–ª–∏ –í–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ *–¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–µ–∞—Ç—Ä–∞*, –Ω–∞–ø–∏—Å–∞–≤ –Ω–∞ –ø–æ—á—Ç—É *support-tuz@bileton.ru* –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏–≤ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É *+7 (843) 292-18-75* (_–µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 8:00 –¥–æ 20:00_)',
		'lang_saved': '‚úÖ –Ø–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 
		'invite': '–ü—Ä–∏–≤–µ—Ç! üëã –ü—Ä–∏–≥–ª–∞—à–∞—é –í–∞—Å –ø–æ–π—Ç–∏ —Å–æ –º–Ω–æ–π –Ω–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É *"@title@"* –≤ –ö–∞–∑–∞–Ω—Å–∫–∏–π –¢–Æ–ó.\n–û–Ω–∞ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å *@datetime@*.\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: *@time@*\n–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: *@age_restriction@*!\n\n_–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã –º–æ–∂–Ω–æ –Ω–∞ _[—Å–∞–π—Ç–µ –¢–Æ–ó–∞](@link@)_, –∏–ª–∏ _*–≤ –Ω–æ–≤–æ–º –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ: @innoscheduler_bot*',
		'session_info': '–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ "*@title@*"\n‚åöÔ∏è –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: *@datetime@*\nüïî –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: *@time@*\nüë®‚Äçüë©‚Äçüë¶‚Äçüë¶ –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: *@age_restriction@*\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—Ç—å –±–∏–ª–µ—Ç—ã –∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–µ–∞–Ω—Å –∑–∞—Ä–∞–Ω–µ–µ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!',
		'buy_ticket': 'üéü –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç'
	}, 
	'eng': {
		'working_hours': '_TUZ is open every day from 9 a.m. to 7 p.m. üòå_',
		'idk_answer': 'ü§∑‚Äç‚ôÇÔ∏è *Sorry, I don‚Äôt understand You.* Please, use push-button menu. If You need any help, You can ask for it in *Technical Support of the TUZ* by writing to *support-tuz@bileton.ru* (_from 8 a.m. to 8 p.m. every day_)',
		'main_menu': '*Hi!* üëã I am an interactive helper-bot of *Kazan TUZ!* Here You can find any information You may need about our theater, learn its history, working hours and also buy tickets.\nAddress: _[10, Ostrovskogo st., Kazan](https://yandex.ru/maps/43/kazan/?from=api-maps&ll=49.113313%2C55.790875&mode=routes&rtext=~55.789389%2C49.113386&rtt=auto&ruri=~&utm_source=api-maps&z=16)',
		'help': 'üôã‚Äç‚ôÇÔ∏è If You need any help, You can ask for it in *Technical Support of the TUZ* by writing to *support-tuz@bileton.ru* or calling to *+7 (843) 292-18-75* (_from 8 a.m. to 8 p.m. every day_)',
		'lang_saved': '‚úÖ Language saved', 
		'invite': 'Hi! üëã I invite You to go with me to the performance called *"@title@"* to Kazan TUZ.\nIt will take place on *@datetime@*.\nDuration: *@time@*\nAge restriction: *@age_restriction@*!\n\n_You can buy tickets on _[TUZ\'s official website](@link@)_ or using our _*new telegram-bot: @innoscheduler_bot*',
		'session_info': 'Performance "*@title@*"\n‚åöÔ∏è Date and Time: *@datetime@*\nüïî Duration: *@time@*\nüë®‚Äçüë©‚Äçüë¶‚Äçüë¶ Age restriction: *@age_restriction@*\n\nWe recommend buying tickets and showing up to permormance in advance! Enjoy!',
		'buy_ticket': 'üéü Buy ticket'
	},
	'tat': {
		'working_hours': '_–≠—à —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ—Å–µ: 9:00 ‚Äî 19:00. –ö”©–Ω —Å–∞–µ–Ω üòå_',
		'idk_answer': 'ü§∑‚Äç‚ôÇÔ∏è *–ì–∞—Ñ—É –∏—Ç–µ–≥–µ–∑, –º–∏–Ω —Å–µ–∑–Ω–µ –∞“£–ª–∞–º—ã–π–º.* –ó–∏–Ω“ª–∞—Ä, –∫–Ω–æ–ø–∫–∞–ª—ã –º–µ–Ω—é–¥–∞–Ω —Ñ–∞–π–¥–∞–ª–∞–Ω—ã–≥—ã–∑. –°–µ–∑–≥”ô —è—Ä–¥”ô–º –∫–∏—Ä”ô–∫ –±—É–ª—Å–∞, *support-tuz@bileton.ru* (_–∫”©–Ω —Å–∞–µ–Ω 8:00 –¥”ô–Ω 20:00_) —Ö–∞—Ç —è–∑—ã–ø *–¢–µ–∞—Ç—Ä–≥–∞ —Ç–µ—Ö–Ω–∏–∫ —è—Ä–¥”ô–º* —Å–æ—Ä—ã–π –∞–ª–∞—Å—ã–∑.',
		'main_menu': '*–ò—Å”ô–Ω–º–µ—Å–µ–∑!* üëã –ú–∏–Ω *–ö–∞–∑–∞–Ω —è—à—å–ª”ô—Ä —Ç–µ–∞—Ç—Ä—ã–Ω—ã“£* –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤ –±–æ—Ç-—è—Ä–¥”ô–º—á–µ—Å–µ! –ú–æ–Ω–¥–∞ —Å–µ–∑ –±–µ–∑–Ω–µ“£ —Ç–µ–∞—Ç—Ä —Ç—É—Ä—ã–Ω–¥–∞ –º”ô–≥—ä–ª“Ø–º–∞—Ç —Ç–∞–±–∞ –∞–ª–∞—Å—ã–∑, –∞–Ω—ã“£ —Ç–∞—Ä–∏—Ö—ã–Ω, —ç—à –≤–∞–∫—ã—Ç—ã–Ω –±–µ–ª”ô –∞–ª–∞—Å—ã–∑, —à—É–ª–∞–π —É–∫ –±–∏–ª–µ—Ç–ª–∞—Ä —Å–∞—Ç—ã–ø –∞–ª–∞ –∞–ª–∞—Å—ã–∑.\n_–ê–¥—Ä–µ—Å: _[–≥. –ö–∞–∑–∞–Ω—å, —É–ª. –û—Å—Ç—Ä–æ–≤—Å–∫–æ–≥–æ, 10](https://yandex.ru/maps/43/kazan/?from=api-maps&ll=49.113313%2C55.790875&mode=routes&rtext=~55.789389%2C49.113386&rtt=auto&ruri=~&utm_source=api-maps&z=16)',
		'help': 'üôã‚Äç‚ôÇÔ∏è –°–µ–∑–≥”ô —è—Ä–¥”ô–º –∫–∏—Ä”ô–∫ –±—É–ª—Å–∞, *support-tuz@bileton.ru* –∞–¥—Ä–µ—Å—ã–Ω–∞ —è–∑—ã–ø —è–∫–∏ *+ 7 (843) 292-18-75* —Ç–µ–ª–µ—Ñ–æ–Ω—ã–Ω–∞ —à–∞–ª—Ç—ã—Ä–∞—Ç—ã–ø —è—Ä–¥”ô–º ”©—á–µ–Ω *–¢–µ–∞—Ç—Ä–Ω—ã“£ —Ç–µ—Ö–Ω–∏–∫ —è—Ä–¥”ô–º–µ* –±–µ–ª”ô–Ω –º”©—Ä”ô“ó”ô–≥–∞—Ç—å –∏—Ç”ô –∞–ª–∞–≥—ã–∑. (_–∫”©–Ω —Å–∞–µ–Ω 8:00 –¥”ô–Ω 20:00_).',
		'lang_saved': '‚úÖ –¢–µ–ª —Å–∞–∫–ª–∞–Ω–≥–∞–Ω', 
		'invite': '–ò—Å”ô–Ω–º–µ—Å–µ–∑! üëã –ú–∏–Ω —Å–µ–∑–Ω–µ –º–∏–Ω–µ–º –±–µ–ª”ô–Ω –ö–∞–∑–∞–Ω –Ø—à—å–ª”ô—Ä –¢–µ–∞—Ç—Ä—ã–Ω–¥–∞ *"@title@"* —Å–ø–µ–∫—Ç–∞–∫–ª–µ–Ω”ô —á–∞–∫—ã—Ä–∞–º.\n–£–ª *@datetime@* –±—É–ª–∞.\n–û–∑—ã–Ω–ª—ã–≥—ã: *@time@*\n–Ø—à—å —á–∏–∫–ª”ô—Ä–µ: *@age_restriction@*!\n\n_–ë–∏–ª–µ—Ç–ª–∞—Ä–Ω—ã _[–Ø—à—å–ª”ô—Ä —Ç–µ–∞—Ç—Ä—ã —Å–∞–π—Ç—ã–Ω–¥–∞](@link@)_ —è–∫–∏ —è“£–∞ _*–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ã–Ω–¥–∞ –∞–ª—ã—Ä–≥–∞ –º”©–º–∫–∏–Ω: @innoscheduler_bot*',
		'session_info': '–ö—É–µ–ª—ã—à "*@title@*"\n‚åöÔ∏è –ö”©–Ω “ª”ô–º –≤–∞–∫—ã—Ç: *@datetime@*\nüïî –û–∑—ã–Ω–ª—ã–≥—ã: *@time@*\nüë®‚Äçüë©‚Äçüë¶‚Äçüë¶ –Ø—à—å —á–∏–∫–ª”ô—Ä–µ: *@age_restriction@*\n\n–ë–∏–ª–µ—Ç–ª–∞—Ä–Ω—ã –∞–ª–¥–∞–Ω —Å–∞—Ç—ã–ø –∞–ª—ã—Ä–≥–∞ h”ô–º —Å–µ–∞–Ω—Å–∫–∞ –∞–ª–¥–∞–Ω –∫–∏–ª–µ—Ä–≥”ô –∫–∏“£”ô—à –±–∏—Ä”ô–±–µ–∑! –ë”ô—Ö–µ—Ç–ª–µ –∫–∞—Ä–∞—É!',
		'buy_ticket': 'üéü –ë–∏–ª–µ—Ç —Å–∞—Ç—ã–ø –∞–ª—ã—Ä–≥–∞'
	}
}

import telebot
import json

from random import randint
import requests
from time import time, sleep
import difflib
from flask import Flask, request
import threading

app = Flask(__name__)
alice_id = '<alice-id>'
oauth = '<yandex-oauth>'


def similarity(s1, s2):
    normalized1 = s1.lower()
    normalized2 = s2.lower()
    matcher = difflib.SequenceMatcher(None, normalized1, normalized2)
    return matcher.ratio()


def generate_session_info_response(session):
    age = '–î–ª—è –∑—Ä–∏—Ç–µ–ª–µ–π —Å—Ç–∞—Ä—à–µ ' + session['age_restriction'][:-1] + ' –ª–µ—Ç'
    if session['age_restriction'][:-1] == '0':
        age = '–ë–µ–∑ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'
    return {
        "response": {
            "text": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–µ–∫—Ç–∞–∫–ª–µ " + session['title'] + '. –í—Ä–µ–º—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è: ' + session[
                'datetime'] + '. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–∞–Ω—Å–∞: ' + session['time'] + '. ' + age,
            "card": {
                "type": "BigImage",
                "image_id": session['ya_image_id'],
                "title": session['title'] + ' | ' + session['age_restriction'],
                "description": '‚åöÔ∏è {0} | üïî {1}'.format(session['datetime'], session['time']),
                "button": {
                    "text": "–ù–∞–¥–ø–∏—Å—å",
                    "url": session['link'],
                    "payload": {}
                }
            },
            "end_session": True
        },
        "version": "1.0"
    }


easter = False


@app.route('/simpledimple', methods=['POST'])
def simpledimple():
    # //todo: –ê–õ–ò–°–ê: –æ–ø–∏—Å–∞–Ω–∏–µ+—Ñ–æ—Ç–æ, –∏—Å—Ç–æ—Ä–∏—è+—Ñ–æ—Ç–æ, –º–∞—Ä—à—Ä—É—Ç, —ç—Ç–∏–∫–∞; –ë–û–¢: –º–∞—Ä—à—Ä—É—Ç, –æ–ø–∏—Å–∞–Ω–∏–µ+—Ñ–æ—Ç–æ
    global easter
    command = json.loads(request.data)['request']['command']
    print('Alice: "' + command + '"')
    if command == "":
        response = {
            "response": {
                "text": "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –ö–∞–∑–∞–Ω—Å–∫–æ–º—É –¢–Æ–ó—É. –°–ø—Ä–æ—Å–∏—Ç–µ —É –º–µ–Ω—è –ø—Ä–æ –∞—Ñ–∏—à—É, —Å–∞–º —Ç–µ–∞—Ç—Ä –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É.",
                "end_session": False
            },
            "version": "1.0"
        }
        return json.dumps(response, ensure_ascii=False, indent=2)

    if easter:
        response = {
            "response": {
                "text": "–î–æ–±–∞–≤–ª—è–π",
                "end_session": True
            },
            "version": "1.0"
        }
        easter = False
        return json.dumps(response, ensure_ascii=False, indent=2)

    if '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å' in command or '–ø–æ–º–æ—â—å' in command:
        response = {
            "response": {
                "text": "–¢—ã –º–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ–± –∞—Ñ–∏—à–µ, —Ç–µ–∞—Ç—Ä–µ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ, –∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Ç–≤–µ—á—É.",
                "end_session": True
            },
            "version": "1.0"
        }
        easter = False
        return json.dumps(response, ensure_ascii=False, indent=2)

    if ' –±–æ—Ç' in command:
        response = {
            "response": {
                "text": "–£–∑–Ω–∞–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –≤ –Ω–∞—à–µ–º –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞.",
                "card": {
                    "type": "BigImage",
                    "image_id": '1652229/3fcf72f85710f2c22527',
                    "title": 'InnoScheduler | –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ö–∞–∑–∞–Ω—Å–∫–æ–º –¢–Æ–ó–µ',
                    "description": '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –¢–µ–ª–µ–≥—Ä–∞–º',
                    "button": {
                        "text": "–ù–∞–¥–ø–∏—Å—å",
                        "url": 'https://t.me/innoscheduler_bot',
                        "payload": {}
                    }
                },
                "end_session": True
            },
            "version": "1.0"
        }
        return json.dumps(response, ensure_ascii=False, indent=2)

    activators = ['–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—é–∑–∞', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Å—Å—ã']

    for key in activators:
        if key in command:
            response = {
                "response": {
                    "text": "–ö–∞—Å—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 9:00 –¥–æ 19:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—á–∞–µ—Ç —Å 8:00 –¥–æ 20:00",
                    "tts": '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00 –¥–æ 19:00',
                    "end_session": True
                },
                "version": "1.0"
            }
            return json.dumps(response, ensure_ascii=False, indent=2)

    activators = ['–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∞—Ç—Ä–∞', '–æ–ø–∏—Å–∞–Ω–∏–µ —Ç—é–∑–∞', '–ø—Ä–æ —Ç—é–∑', '–æ —Ç–µ–∞—Ç—Ä–µ', '–æ —Ç—é–∑–µ']

    for key in activators:
        if key in command:
            response = {
                "response": {
                    "text": "–ü–µ—Ä–≤—ã–π —Å–ø–µ–∫—Ç–∞–∫–ª—å —Å–æ—Å—Ç–æ—è–ª—Å—è 30 –Ω–æ—è–±—Ä—è 1932 –≥–æ–¥–∞. –≠—Ç–æ –æ–¥–∏–Ω –∏–∑ –ø–µ—Ä–≤—ã—Ö —Ç–µ–∞—Ç—Ä–æ–≤ –†–æ—Å—Å–∏–∏, –ø–æ–ª—É—á–∏–≤—à–∏–π –≤—ã—Å—à—É—é —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω—É—é –ø—Ä–µ–º–∏—é \"–ó–æ–ª–æ—Ç–∞—è –ú–∞—Å–∫–∞\". –í —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–µ —Ç–µ–∞—Ç—Ä–∞ - —Ç—Ä–∏–¥—Ü–∞—Ç—å —á–µ—Ç—ã—Ä–µ —Å–ø–µ–∫—Ç–∞–∫–ª—è. –ê–¥—Ä–µ—Å –∫–∞—Å—Å—ã: –ö–∞–∑–∞–Ω—å, –û—Å—Ç—Ä–æ–≤—Å–∫–æ–≥–æ, 10",
                    "tts": "–ü–µ—Ä–≤—ã–π —Å–ø–µ–∫—Ç–∞–∫–ª—å —Å–æ—Å—Ç–æ—è–ª—Å—è 30 –Ω–æ—è–±—Ä—è 1932 –≥–æ–¥–∞. –≠—Ç–æ –æ–¥–∏–Ω –∏–∑ –ø–µ—Ä–≤—ã—Ö —Ç–µ–∞—Ç—Ä–æ–≤ –†–æ—Å—Å–∏–∏, –ø–æ–ª—É—á–∏–≤—à–∏–π –≤—ã—Å—à—É—é —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω—É—é –ø—Ä–µ–º–∏—é \"–ó–æ–ª–æ—Ç–∞—è –ú–∞—Å–∫–∞\". –í —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–µ —Ç–µ–∞—Ç—Ä–∞ - —Ç—Ä–∏–¥—Ü–∞—Ç—å —á–µ—Ç—ã—Ä–µ —Å–ø–µ–∫—Ç–∞–∫–ª—è. –ê–¥—Ä–µ—Å –∫–∞—Å—Å—ã: –ö–∞–∑–∞–Ω—å, –û—Å—Ç—Ä–æ–≤—Å–∫–æ–≥–æ, 10",
                    "card": {
                        "type": "BigImage",
                        "image_id": '1540737/352b2c5a798fbbe0f9bf',
                        "title": '–¢–µ–∞—Ç—Ä –Æ–Ω–æ–≥–æ –ó—Ä–∏—Ç–µ–ª—è –≤ –ö–∞–∑–∞–Ω–∏',
                        "description": '–ê–¥—Ä–µ—Å –∫–∞—Å—Å—ã: –ö–∞–∑–∞–Ω—å, –û—Å—Ç—Ä–æ–≤—Å–∫–æ–≥–æ, 10'
                    },
                    "end_session": True
                },
                "version": "1.0"
            }
            return json.dumps(response, ensure_ascii=False, indent=2)

    if '–±—É—Ñ–µ—Ç' in command:
        response = {
            "response": {
                "text": "–ë—É—Ñ–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–∞–∫ —Ä–∞–∑ –Ω–∞ –ø—É—Ç–∏ –º–µ–∂–¥—É –≥–∞—Ä–¥–µ—Ä–æ–±–æ–º –∏ –∫–æ—Ä–∏–¥–æ—Ä–æ–º, –≤–µ–¥—É—â–∏–º –≤ –ø–æ–º–µ—â–µ–Ω–∏–µ —Å–æ —Å—Ü–µ–Ω–æ–π. –û—á–µ–Ω—å –º–Ω–æ–≥–æ —Å–ª–∞–¥–æ—Å—Ç–µ–π –ø–æ –¥–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∏–º —Ü–µ–Ω–∞–º",
                "end_session": True
            },
            "version": "1.0"
        }
        return json.dumps(response, ensure_ascii=False, indent=2)

    activators = ['–∞—Ñ–∏—à', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '—Å–ø–µ–∫—Ç–∞–∫–ª–∏', '–ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏', '—Å–µ–∞–Ω—Å—ã']

    for key in activators:
        if key in command:
            afisha = ''
            found = []
            for session in sessions:
                if session['title'] in found:
                    continue
                found.append(session['title'])
                afisha += session['title'] + ' ' + session['age_restriction'] + ' | ' + session['datetime'][
                                                                                        :session['datetime'].find(
                                                                                            '(')] + session['datetime'][
                                                                                                    session[
                                                                                                        'datetime'].find(
                                                                                                        ')') + 2:] + '\n'

            afisha = afisha[:1000]

            print(afisha)

            response = {
                "response": {
                    "text": afisha,
                    "tts": '–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –í–∞–º –∞—Ñ–∏—à—É',
                    "end_session": True
                },
                "version": "1.0"
            }
            return json.dumps(response, ensure_ascii=False, indent=2)

    if '—Å–∏–º–ø–ª –¥–∏–º–ø–ª' in command:
        response = {
            "response": {
                "text": "–ß—Ç–æ —Ç—ã –º–Ω–µ –¥–∞—à—å –∑–∞ —ç—Ç–æ—Ç —Å–∏–º–ø–ª –¥–∏–º–ø–ª?",
                "card": {
                    "type": "BigImage",
                    "image_id": '1521359/a9f58c14e935778c8023',
                    "title": '–°–∏–º–ø–ª –î–∏–º–ø–ª',
                    "description": '–≠—Ç–æ –Ω–µ –ø–æ–ø—ã—Ç',
                    "button": {
                        "text": "–ù–∞–¥–ø–∏—Å—å",
                        "url": 'https://innostudy.ru',
                        "payload": {}
                    }
                },
                "end_session": False
            },
            "version": "1.0"
        }
        easter = True
        return json.dumps(response, ensure_ascii=False, indent=2)

    show_info = ['–ø–æ–∫–∞–∂–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∞–Ω—Å–µ', '—Å–µ–∞–Ω—Å', '—Å–ø–µ–∫—Ç–∞–∫–ª—å', '–ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞', '–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ',
                 '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–µ–∫—Ç–∞–∫–ª–µ', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–∞–Ω—Å–µ', '–ø–æ–∫–∞–∂–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ–∫—Ç–∞–∫–ª–µ',
                 '–ø–æ–∫–∞–∂–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–ø–µ–∫—Ç–∞–∫–ª–µ',
                 '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–∞–Ω—Å–µ', '–ø–æ–∫–∞–∂–∏ —Å–ø–µ–∫—Ç–∞–∫–ª—å', '–ø–æ–∫–∞–∂–∏ —Å–µ–∞–Ω—Å', '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ', '–ø–æ–∫–∞–∂–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É',
                 '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É', '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Å–ø–µ–∫—Ç–∞–∫–ª—å', '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Å–µ–∞–Ω—Å']

    show_info.sort(key=len, reverse=True)

    for session in sessions:
        if similarity(command, session['title'].lower()) >= .7:
            response = generate_session_info_response(session)
            return json.dumps(response, ensure_ascii=False, indent=2)

    for key in show_info:
        if key in command:
            command = command[len(key) + 1:]
            for session in sessions:
                if similarity(command, session['title'].lower()) >= .7:
                    response = generate_session_info_response(session)
                    return json.dumps(response, ensure_ascii=False, indent=2)

    response = {
        "response": {
            "text": "–ù–µ –ø–æ–Ω–∏–º–∞—é –í–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            "end_session": False
        },
        "version": "1.0"
    }
    easter = False
    return json.dumps(response, ensure_ascii=False, indent=2)


sessions = json.loads(open(script_path + 'sessions.json', 'r').read())['sessions']

bot = telebot.TeleBot(token='<api-token>')

try:
    fsm = json.loads(open(fsm_path, 'r').read())
except:
    fsm = {}

lang_kb = telebot.types.InlineKeyboardMarkup()
lang_kb.add(telebot.types.InlineKeyboardButton('üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data='setlang_rus'))
lang_kb.add(telebot.types.InlineKeyboardButton('üá∫üá∏ English', callback_data='setlang_eng'))
lang_kb.add(telebot.types.InlineKeyboardButton('üá≠üá∫ –¢–∞—Ç–∞—Ä —Ç–µ–ª–µ', callback_data='setlang_tat'))


def save_db():
    open(fsm_path, 'w').write(json.dumps(fsm))


def ss(usid, status):
    global fsm
    usid = str(usid)
    if usid not in fsm:
        fsm[usid] = {'fsm': ''}

    fsm[usid]['fsm'] = status


def gs(usid):
    usid = str(usid)
    if usid not in fsm:
        return ''

    return fsm[usid]['fsm']


def get_main_kb(usid):
    lang = get_lang(str(usid))
    if not lang:
        return

    main_kb = telebot.types.InlineKeyboardMarkup()

    if lang == "rus":
        main_kb.add(telebot.types.InlineKeyboardButton('‚åöÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã', callback_data='working_hours'),
                    telebot.types.InlineKeyboardButton('‚ùì –ü–æ–º–æ—â—å', callback_data='help'))
        main_kb.add(telebot.types.InlineKeyboardButton('üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥—É', switch_inline_query=''))
        main_kb.add(telebot.types.InlineKeyboardButton('üì≤ –í—Å–µ —Å–ø–µ–∫—Ç–∞–∫–ª–∏', switch_inline_query_current_chat=''))
    elif lang == "eng":
        main_kb.add(telebot.types.InlineKeyboardButton('‚åöÔ∏è Working hours', callback_data='working_hours'),
                    telebot.types.InlineKeyboardButton('‚ùì Help', callback_data='help'))
        main_kb.add(telebot.types.InlineKeyboardButton('üíå Send invite to Your friend', switch_inline_query=''))
        main_kb.add(telebot.types.InlineKeyboardButton('üì≤ All sessions', switch_inline_query_current_chat=''))
    elif lang == "tat":
        main_kb.add(telebot.types.InlineKeyboardButton('‚åöÔ∏è –≠—à —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ—Å–µ', callback_data='working_hours'),
                    telebot.types.InlineKeyboardButton('‚ùì –Ø—Ä–¥”ô–º', callback_data='help'))
        main_kb.add(telebot.types.InlineKeyboardButton('üíå –î—É—Å—Ç—ã“£–∞ —á–∞–∫—ã—Ä—É “ó–∏–±”ô—Ä–≥”ô', switch_inline_query=''))
        main_kb.add(telebot.types.InlineKeyboardButton('üì≤ –ë–∞—Ä–ª—ã–≥—ã —Å–ø–µ–∫—Ç–∞–∫–ª—å–ª”ô—Ä', switch_inline_query_current_chat=''))

    return main_kb


def get_go_kb(usid):
    lang = get_lang(str(usid))
    if not lang:
        return

    go_kb = telebot.types.InlineKeyboardMarkup()

    if lang == "rus":
        go_kb.add(telebot.types.InlineKeyboardButton('üéü –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞', url='https://t.me/innoscheduler_bot'))
    elif lang == "eng":
        go_kb.add(telebot.types.InlineKeyboardButton('üéü Go to bot', url='https://t.me/innoscheduler_bot'))
    elif lang == "tat":
        go_kb.add(telebot.types.InlineKeyboardButton('üéü –ë–æ—Ç–Ω—ã –∞—á–∞—Ä–≥–∞', url='https://t.me/innoscheduler_bot'))

    return go_kb


def answer(destination, msg, reply_markup=None, parse_mode="Markdown", reply_to_message_id=None):
    try:
        destination = int(destination)
    except:
        pass

    if isinstance(destination, telebot.types.CallbackQuery):
        try:
            return bot.edit_message_text(chat_id=destination.message.chat.id, message_id=destination.message.message_id,
                                         text=msg, reply_markup=reply_markup, parse_mode=parse_mode,
                                         disable_web_page_preview=True)
        except telebot.apihelper.ApiException as e:
            bot.answer_callback_query(callback_query_id=destination.id)
    elif isinstance(destination, telebot.types.Message):
        return bot.send_message(chat_id=destination.chat.id, text=msg, reply_markup=reply_markup, parse_mode=parse_mode,
                                reply_to_message_id=reply_to_message_id, disable_web_page_preview=True)
    elif isinstance(destination, int) or (isinstance(destination, str) and destination.startswith("@")):
        return bot.send_message(chat_id=destination, text=msg, reply_markup=reply_markup, parse_mode=parse_mode,
                                reply_to_message_id=reply_to_message_id, disable_web_page_preview=True)


def get_lang(usid):
    global fsm
    if usid not in fsm or 'lang' not in fsm[usid] or fsm[usid]['lang'] not in texts.keys():
        answer(usid,
               '*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\nPlease, choose the language\n–ó–∏–Ω“ª–∞—Ä, –±–æ—Ç —ç—à–ª”ô—Å–µ–Ω ”©—á–µ–Ω —Ç–µ–ª–Ω–µ —Å–∞–π–ª–∞–≥—ã–∑*',
               reply_markup=lang_kb)
        return False

    return fsm[usid]['lang']


def to_tatar(line):
    line = line.replace('–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–î“Ø—à”ô–º–±–µ –∫”©–Ω–Ω–µ').replace('–≤—Ç–æ—Ä–Ω–∏–∫', '–°–∏—à”ô–º–±–µ –∫”©–Ω–Ω–µ').replace('—Å—Ä–µ–¥–∞',
                                                                                                    '—á”ô—Ä—à”ô–º–±–µ –∫”©–Ω–Ω–µ')
    line = line.replace('—á–µ—Ç–≤–µ—Ä–≥', '–ü”ô–Ω“ó–µ—à”ô–º–±–µ –∫”©–Ω–Ω–µ').replace('–ø—è—Ç–Ω–∏—Ü–∞', '“ñ–æ–º–≥–∞ –∫”©–Ω–Ω–µ').replace('—Å—É–±–±–æ—Ç–∞',
                                                                                                 '–®–∏–º–±”ô –∫”©–Ω–Ω–µ').replace(
        '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
        '–Ø–∫—à”ô–º–±–µ–¥”ô –∫”©–Ω–Ω–µ')
    line = line.replace('—á–∞—Å–∞', '—Å”ô–≥–∞—Ç—å').replace('—á–∞—Å–æ–≤', '—Å”ô–≥–∞—Ç—å').replace('—á–∞—Å', '—Å”ô–≥–∞—Ç—å')
    line = line.replace('–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç').replace('–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç').replace('–º–∏–Ω—É—Ç', '–º–∏–Ω—É—Ç')
    line = line.replace('—è–Ω–≤–∞—Ä—è', '–≥—ã–π–Ω–≤–∞—Ä').replace('—Ñ–µ–≤—Ä–∞–ª—è', '—Ñ–µ–≤—Ä–∞–ª—å').replace('–º–∞—Ä—Ç–∞', '–º–∞—Ä—Ç')
    line = line.replace('–∞–ø—Ä–µ–ª—è', '–∞–ø—Ä–µ–ª—å').replace('–º–∞—è', '–º–∞–π').replace('–∏—é–Ω—è', '–∏—é–Ω—å')
    line = line.replace('–∏—é–ª—è', '–∏—é–ª—å').replace('–∞–≤–≥—É—Å—Ç–∞', '–∞–≤–≥—É—Å—Ç').replace('—Å–µ–Ω—Ç—è–±—Ä—è', '—Å–µ–Ω—Ç—è–±—Ä—å')
    line = line.replace('–æ–∫—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—å').replace('–Ω–æ—è–±—Ä—è', '–Ω–æ—è–±—Ä—å').replace('–¥–µ–∫–∞–±—Ä—è', '–¥–µ–∫–∞–±—Ä—å')
    return line


def to_english(line):
    line = line.replace('–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'Mon').replace('–≤—Ç–æ—Ä–Ω–∏–∫', 'Tue').replace('—Å—Ä–µ–¥–∞', 'Wed')
    line = line.replace('—á–µ—Ç–≤–µ—Ä–≥', 'Thu').replace('–ø—è—Ç–Ω–∏—Ü–∞', 'Fri').replace('—Å—É–±–±–æ—Ç–∞', 'Sat').replace('–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
                                                                                                      'Sun')
    line = line.replace('—á–∞—Å–∞', 'hrs').replace('—á–∞—Å–æ–≤', 'hrs').replace('—á–∞—Å', 'hr')
    line = line.replace('–º–∏–Ω—É—Ç–∞', 'min').replace('–º–∏–Ω—É—Ç—ã', 'min').replace('–º–∏–Ω—É—Ç', 'min')
    line = line.replace('—è–Ω–≤–∞—Ä—è', 'of January').replace('—Ñ–µ–≤—Ä–∞–ª—è', 'of February').replace('–º–∞—Ä—Ç–∞', 'of March')
    line = line.replace('–∞–ø—Ä–µ–ª—è', 'of April').replace('–º–∞—è', 'of May').replace('–∏—é–Ω—è', 'of June')
    line = line.replace('–∏—é–ª—è', 'of July').replace('–∞–≤–≥—É—Å—Ç–∞', 'of August').replace('—Å–µ–Ω—Ç—è–±—Ä—è', 'of September')
    line = line.replace('–æ–∫—Ç—è–±—Ä—è', 'of October').replace('–Ω–æ—è–±—Ä—è', 'of November').replace('–¥–µ–∫–∞–±—Ä—è', 'of December')
    return line


@bot.message_handler(commands=['start'])
def start_message(message):
    global fsm
    usid = str(message.from_user.id)

    if usid not in fsm:
        fsm[usid] = {'fsm': ''}
        save_db()

    lang = get_lang(usid)
    if not lang:
        return

    answer(message, texts[lang]['main_menu'], reply_markup=get_main_kb(usid))


@bot.message_handler(commands=['change_language'])
def change_language_router(message):
    global fsm
    usid = str(message.from_user.id)
    if usid in fsm and 'lang' in fsm[usid]:
        del fsm[usid]['lang']
        save_db()

    get_lang(usid)


admins = [659800858]


@bot.message_handler(commands=['sendall'])
def sendall(message):
    if message.from_user.id not in admins:
        return

    counter = 0
    for user, data in fsm.items():
        try:
            answer(user, message.text[9:])
            counter += 1
        except:
            pass

    answer(message, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ " + str(counter) + " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")


@bot.message_handler(content_types=['text'])
def text_message(message):
    usid = str(message.from_user.id)
    lang = get_lang(usid)
    if not lang:
        return

    if 'event#' in message.text:
        event_id = message.text[message.text.find('event#') + 6:]
        for session in sessions:
            if session['id'] == event_id:
                session_info = texts[lang]['session_info'].replace('@title@', session['title']).replace('@datetime@',
                                                                                                        session[
                                                                                                            'datetime']).replace(
                    '@time@', session['time']).replace('@age_restriction@', session['age_restriction']).replace(
                    '@link@', session['link'])

                temp_kb = get_main_kb(usid)
                temp_kb.add(telebot.types.InlineKeyboardButton(texts[lang]['buy_ticket'], url=session['link']))

                bot.send_photo(chat_id=message.chat.id, photo=session['image_src'], caption=session_info,
                               reply_markup=temp_kb, parse_mode="Markdown")
                return

    answer(message, texts[lang]['idk_answer'], reply_markup=get_main_kb(usid))


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    global fsm
    usid = str(call.from_user.id)
    if not 'setlang' in call.data:
        lang = get_lang(usid)
        if not lang:
            return

    if call.data == "working_hours":
        answer(call, texts[lang]['working_hours'], reply_markup=get_main_kb(usid))
    elif call.data == "help":
        answer(call, texts[lang]['help'], reply_markup=get_main_kb(usid))
    elif call.data.startswith('setlang'):
        language = call.data.split('_')[1]
        if usid not in fsm:
            fsm[usid] = {'fsm': ''}
        fsm[usid]['lang'] = language
        save_db()
        bot.answer_callback_query(call.id, texts[language]['lang_saved'])
        answer(call, texts[language]['main_menu'], reply_markup=get_main_kb(usid))


@bot.inline_handler(func=lambda query: True)
def query_text(inline_query):
    bot.answer_inline_query(inline_query.id, search_available_sessions(inline_query.query, inline_query.from_user.id),
                            cache_time=1)


def search_available_sessions(query, usid):
    usid = str(usid)
    if usid not in fsm:
        return [telebot.types.InlineQueryResultArticle(
            id=time(),
            title='You need to activate the bot!',
            input_message_content=telebot.types.InputTextMessageContent(
                '.'
            ),
            description='–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ START\nGo to bot and click START\n–ë–æ—Ç —ç—á–µ–Ω–¥”ô –∫–µ—Ä–µ–≥–µ–∑ “ª”ô–º START –±–∞—Å—ã–≥—ã–∑',
            thumb_height=1
        )]

    lang = get_lang(usid)
    if not lang:
        lang = 'eng'

    result = []
    if len(query) > 0:
        for session in sessions:
            if query.lower() not in session['title'].lower():
                continue
            if len(result) < 15:
                invite = texts[lang]['invite'].replace('@title@', session['title']).replace('@datetime@', session[
                    'datetime']).replace('@time@', session['time']).replace('@age_restriction@',
                                                                            session['age_restriction']).replace(
                    '@link@', session['link']) + '\n_event#' + str(session['id']) + '_'
                title = session['title'] + ' ' + session['age_restriction']
                desc = '‚åöÔ∏è {0}\nüïî {1}'.format(session['datetime'], session['time'])
                if lang == 'eng':
                    invite = to_english(invite)
                    title = to_english(title)
                    desc = to_english(desc)
                elif lang == 'tat':
                    invite = to_tatar(invite)
                    title = to_tatar(title)
                    desc = to_tatar(desc)

                result.append(
                    telebot.types.InlineQueryResultArticle(
                        id=time(),
                        title=title,
                        input_message_content=telebot.types.InputTextMessageContent(
                            parse_mode='Markdown',
                            message_text=invite,
                            disable_web_page_preview=True
                        ),
                        description=desc,
                        thumb_url=session['image_src'],
                        reply_markup=get_go_kb(usid)
                    )
                )
            else:
                break
    else:
        for session in sessions:
            if len(result) < 15:
                invite = texts[lang]['invite'].replace('@title@', session['title']).replace('@datetime@', session[
                    'datetime']).replace('@time@', session['time']).replace('@age_restriction@',
                                                                            session['age_restriction']).replace(
                    '@link@', session['link']) + '\n_event#' + str(session['id']) + '_'
                title = session['title'] + ' ' + session['age_restriction']
                desc = '‚åöÔ∏è {0}\nüïî {1}'.format(session['datetime'], session['time'])
                if lang == 'eng':
                    invite = to_english(invite)
                    title = to_english(title)
                    desc = to_english(desc)
                elif lang == 'tat':
                    invite = to_tatar(invite)
                    title = to_tatar(title)
                    desc = to_tatar(desc)

                result.append(
                    telebot.types.InlineQueryResultArticle(
                        id=time(),
                        title=title,
                        input_message_content=telebot.types.InputTextMessageContent(
                            parse_mode='Markdown',
                            message_text=invite,
                            disable_web_page_preview=True
                        ),
                        description=desc,
                        thumb_url=session['image_src'],
                        reply_markup=get_go_kb(usid)
                    )
                )
            else:
                break
    return result


def start_app():
    app.run(port=5000)


def start_bot():
    bot.polling(timeout=123, interval=0, none_stop=True)


def update_sessions():
    global sessions
    while True:
        sessions = json.loads(open(script_path + 'sessions.json', 'r').read())['sessions']
        sleep(120)


threading.Thread(target=start_app).start()
threading.Thread(target=start_bot).start()
threading.Thread(target=update_sessions).start()
